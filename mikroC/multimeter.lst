;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 30/11/2014 11:03:48
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$158A			BSF	PCLATH, 3
$0001	$2D30			GOTO	_main
$0004	$	_interrupt:
$0004	$00FF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$00DB			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$00DA			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$00DC			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0870			MOVF	STACK_0, 0
$000E	$1683			BSF	STATUS, RP0
$000F	$00C7			MOVWF	STSAVED_0
;multimeter.c,207 :: 		void interrupt(){
;multimeter.c,208 :: 		counter++;
$0010	$1283			BCF	STATUS, RP0
$0011	$0AA1			INCF	_counter, 1
$0012	$1903			BTFSC	STATUS, Z
$0013	$0AA2			INCF	_counter+1, 1
$0014	$1903			BTFSC	STATUS, Z
$0015	$0AA3			INCF	_counter+2, 1
$0016	$1903			BTFSC	STATUS, Z
$0017	$0AA4			INCF	_counter+3, 1
;multimeter.c,209 :: 		if (counter==4294967295){err_c=1;}
$0018	$0824			MOVF	_counter+3, 0
$0019	$3AFF			XORLW	255
$001A	$1D03			BTFSS	STATUS, Z
$001B	$2826			GOTO	L_interrupt_46
$001C	$0823			MOVF	_counter+2, 0
$001D	$3AFF			XORLW	255
$001E	$1D03			BTFSS	STATUS, Z
$001F	$2826			GOTO	L_interrupt_46
$0020	$0822			MOVF	_counter+1, 0
$0021	$3AFF			XORLW	255
$0022	$1D03			BTFSS	STATUS, Z
$0023	$2826			GOTO	L_interrupt_46
$0024	$0821			MOVF	_counter, 0
$0025	$3AFF			XORLW	255
$0026	$	L_interrupt_46:
$0026	$1D03			BTFSS	STATUS, Z
$0027	$282A			GOTO	L_interrupt_43
$0028	$3001			MOVLW	1
$0029	$00A5			MOVWF	_err_c
$002A	$	L_interrupt_43:
;multimeter.c,210 :: 		INTCON.TMR0IF=0;
$002A	$110B			BCF	INTCON, 2
;multimeter.c,211 :: 		}
$002B	$	L_Interrupt_end:
$002B	$1683			BSF	STATUS, RP0
$002C	$0847			MOVF	STSAVED_0, 0
$002D	$00F0			MOVWF	STACK_0
$002E	$1283			BCF	STATUS, RP0
$002F	$085C			MOVF	?savePCLATH, 0
$0030	$008A			MOVWF	PCLATH
$0031	$085A			MOVF	?saveFSR, 0
$0032	$0084			MOVWF	FSR
$0033	$0E5B			SWAPF	?saveSTATUS, 0
$0034	$0083			MOVWF	STATUS
$0035	$0EFF			SWAPF	STACK_15, 1
$0036	$0E7F			SWAPF	STACK_15, 0
$0037	$0009			RETFIE
$0DAB	$	_Delay_1us:
;delays.c,7 :: 		void Delay_1us() {
;delays.c,8 :: 		Delay_us(1);
$0DAB	$0000			NOP
;delays.c,9 :: 		}
$0DAC	$0008			RETURN
$0D0E	$	_Delay_5500us:
;delays.c,31 :: 		void Delay_5500us() {
;delays.c,32 :: 		Delay_us(5500);
$0D0E	$3008			MOVLW	8
$0D0F	$1303			BCF	STATUS, RP1
$0D10	$1283			BCF	STATUS, RP0
$0D11	$00FB			MOVWF	STACK_11
$0D12	$30FF			MOVLW	255
$0D13	$00FA			MOVWF	STACK_10
$0D14	$0BFB			DECFSZ	STACK_11, F
$0D15	$2D17			GOTO	$+2
$0D16	$2D1A			GOTO	$+4
$0D17	$0BFA			DECFSZ	STACK_10, F
$0D18	$2D17			GOTO	$-1
$0D19	$2D14			GOTO	$-5
$0D1A	$301E			MOVLW	30
$0D1B	$00FA			MOVWF	STACK_10
$0D1C	$0BFA			DECFSZ	STACK_10, F
$0D1D	$2D1C			GOTO	$-1
;delays.c,33 :: 		}
$0D1E	$0008			RETURN
$0D7C	$	_Delay_50us:
;delays.c,19 :: 		void Delay_50us() {
;delays.c,20 :: 		Delay_us(50);
$0D7C	$3010			MOVLW	16
$0D7D	$1303			BCF	STATUS, RP1
$0D7E	$1283			BCF	STATUS, RP0
$0D7F	$00FA			MOVWF	STACK_10
$0D80	$0BFA			DECFSZ	STACK_10, F
$0D81	$2D80			GOTO	$-1
$0D82	$0000			NOP
;delays.c,21 :: 		}
$0D83	$0008			RETURN
$0D73	$	_RES032:
$0D73	$1303			BCF	STATUS, RP1
$0D74	$1283			BCF	STATUS, RP0
$0D75	$01F2			CLRF	STACK_2
$0D76	$01F1			CLRF	STACK_1
$0D77	$01F0			CLRF	STACK_0
$0D78	$01F8			CLRF	STACK_8
$0D79	$01F3			CLRF	STACK_3
$0D7A	$3000			MOVLW	0
$0D7B	$0008			RETURN
$0D5F	$	_SETFUN32:
$0D5F	$1303			BCF	STATUS, RP1
$0D60	$1283			BCF	STATUS, RP0
$0D61	$157B			BSF	STACK_11, 2
$0D62	$1FFB			BTFSS	STACK_11, 7
$0D63	$2D6B			GOTO	SETFUN32EEE
$0D64	$3001			MOVLW	0x01
$0D65	$00F3			MOVWF	STACK_3
$0D66	$01F2			CLRF	STACK_2
$0D67	$01F1			CLRF	STACK_1
$0D68	$01F0			CLRF	STACK_0
$0D69	$0DFA			RLF	STACK_10, F
$0D6A	$0CF2			RRF	STACK_2, F
$0D6B	$	SETFUN32EEE:
$0D6B	$30FF			MOVLW	0xFF
$0D6C	$0008			RETURN
$0DA0	$	_FIXSIGN32:
$0DA0	$1303			BCF	STATUS, RP1
$0DA1	$1283			BCF	STATUS, RP0
$0DA2	$1FFA			BTFSS	STACK_10, 7
$0DA3	$13F2			BCF	STACK_2, 7
$0DA4	$3000			MOVLW	0
$0DA5	$0008			RETURN
$0705	$	_SETFOV32:
$0705	$1303			BCF	STATUS, RP1
$0706	$1283			BCF	STATUS, RP0
$0707	$14FB			BSF	STACK_11, 1
$0708	$1FFB			BTFSS	STACK_11, 7
$0709	$2F11			GOTO	SETFOV32EEE
$070A	$30FF			MOVLW	0xFF
$070B	$00F3			MOVWF	STACK_3
$070C	$00F2			MOVWF	STACK_2
$070D	$00F1			MOVWF	STACK_1
$070E	$00F0			MOVWF	STACK_0
$070F	$0DFA			RLF	STACK_10, F
$0710	$0CF2			RRF	STACK_2, F
$0711	$	SETFOV32EEE:
$0711	$30FF			MOVLW	0xFF
$0712	$0008			RETURN
$0AB1	$	_Lcd_Cmd:
$0AB1	$1303			BCF	STATUS, RP1
$0AB2	$1283			BCF	STATUS, RP0
$0AB3	$0826			MOVF	LCD_port_address, 0
$0AB4	$0084			MOVWF	FSR
$0AB5	$1683			BSF	STATUS, RP0
$0AB6	$0846			MOVF	FARG_Lcd_Cmd+0, 0
$0AB7	$1903			BTFSC	STATUS, Z
$0AB8	$2AB9			GOTO	L_Lcd_Cmd_0
$0AB9	$	L_Lcd_Cmd_0:
$0AB9	$1180			BCF	INDF, ___ENABLE
$0ABA	$1100			BCF	INDF, ___RS
$0ABB	$1380			BCF	INDF, ___DB7
$0ABC	$1300			BCF	INDF, ___DB6
$0ABD	$1280			BCF	INDF, ___DB5
$0ABE	$1200			BCF	INDF, ___DB4
$0ABF	$1BC6			BTFSC	FARG_Lcd_Cmd+0, 7
$0AC0	$1780			BSF	INDF, ___DB7
$0AC1	$1B46			BTFSC	FARG_Lcd_Cmd+0, 6
$0AC2	$1700			BSF	INDF, ___DB6
$0AC3	$1AC6			BTFSC	FARG_Lcd_Cmd+0, 5
$0AC4	$1680			BSF	INDF, ___DB5
$0AC5	$1A46			BTFSC	FARG_Lcd_Cmd+0, 4
$0AC6	$1600			BSF	INDF, ___DB4
$0AC7	$1283			BCF	STATUS, RP0
$0AC8	$0827			MOVF	LCD_cmd_status, 0
$0AC9	$1903			BTFSC	STATUS, Z
$0ACA	$2ACD			GOTO	L_Lcd_Cmd_1
$0ACB	$1100			BCF	INDF, ___RS
$0ACC	$2ACE			GOTO	L_Lcd_Cmd_2
$0ACD	$	L_Lcd_Cmd_1:
$0ACD	$1500			BSF	INDF, ___RS
$0ACE	$	L_Lcd_Cmd_2:
$0ACE	$1580			BSF	INDF, ___ENABLE
$0ACF	$25AB			CALL	_Delay_1us
$0AD0	$1683			BSF	STATUS, RP0
$0AD1	$0846			MOVF	FARG_Lcd_Cmd+0, 0
$0AD2	$1903			BTFSC	STATUS, Z
$0AD3	$2AD4			GOTO	L_Lcd_Cmd_3
$0AD4	$	L_Lcd_Cmd_3:
$0AD4	$1180			BCF	INDF, ___ENABLE
$0AD5	$1100			BCF	INDF, ___RS
$0AD6	$1380			BCF	INDF, ___DB7
$0AD7	$1300			BCF	INDF, ___DB6
$0AD8	$1280			BCF	INDF, ___DB5
$0AD9	$1200			BCF	INDF, ___DB4
$0ADA	$19C6			BTFSC	FARG_Lcd_Cmd+0, 3
$0ADB	$1780			BSF	INDF, ___DB7
$0ADC	$1946			BTFSC	FARG_Lcd_Cmd+0, 2
$0ADD	$1700			BSF	INDF, ___DB6
$0ADE	$18C6			BTFSC	FARG_Lcd_Cmd+0, 1
$0ADF	$1680			BSF	INDF, ___DB5
$0AE0	$1846			BTFSC	FARG_Lcd_Cmd+0, 0
$0AE1	$1600			BSF	INDF, ___DB4
$0AE2	$1283			BCF	STATUS, RP0
$0AE3	$0827			MOVF	LCD_cmd_status, 0
$0AE4	$1903			BTFSC	STATUS, Z
$0AE5	$2AE8			GOTO	L_Lcd_Cmd_4
$0AE6	$1100			BCF	INDF, ___RS
$0AE7	$2AE9			GOTO	L_Lcd_Cmd_5
$0AE8	$	L_Lcd_Cmd_4:
$0AE8	$1500			BSF	INDF, ___RS
$0AE9	$	L_Lcd_Cmd_5:
$0AE9	$1580			BSF	INDF, ___ENABLE
$0AEA	$25AB			CALL	_Delay_1us
$0AEB	$1180			BCF	INDF, ___ENABLE
$0AEC	$0827			MOVF	LCD_cmd_status, 0
$0AED	$1903			BTFSC	STATUS, Z
$0AEE	$2AF1			GOTO	L_Lcd_Cmd_6
$0AEF	$250E			CALL	_Delay_5500us
$0AF0	$2AF2			GOTO	L_Lcd_Cmd_7
$0AF1	$	L_Lcd_Cmd_6:
$0AF1	$257C			CALL	_Delay_50us
$0AF2	$	L_Lcd_Cmd_7:
$0AF2	$0008			RETURN
$0D99	$	_Delay_22us:
;delays.c,15 :: 		void Delay_22us() {
;delays.c,16 :: 		Delay_us(22);
$0D99	$3007			MOVLW	7
$0D9A	$1303			BCF	STATUS, RP1
$0D9B	$1283			BCF	STATUS, RP0
$0D9C	$00FA			MOVWF	STACK_10
$0D9D	$0BFA			DECFSZ	STACK_10, F
$0D9E	$2D9D			GOTO	$-1
;delays.c,17 :: 		}
$0D9F	$0008			RETURN
$0A53	$	_NRM4032:
$0A53	$1303			BCF	STATUS, RP1
$0A54	$1283			BCF	STATUS, RP0
$0A55	$187C			BTFSC	STACK_12, 0
$0A56	$2A8B			GOTO	NRMRND4032
$0A57	$18FC			BTFSC	STACK_12, 1
$0A58	$2A5C			GOTO	NRM4032
$0A59	$197C			BTFSC	STACK_12, 2
$0A5A	$2AAA			GOTO	JMPSETFOV32
$0A5B	$2A55			GOTO	$-6
$0A5C	$	NRM4032:
$0A5C	$01A0			CLRF	__math_tempbD
$0A5D	$0872			MOVF	STACK_2, W
$0A5E	$1D03			BTFSS	STATUS, Z
$0A5F	$2A7C			GOTO	NORM4032
$0A60	$0871			MOVF	STACK_1, W
$0A61	$00F2			MOVWF	STACK_2
$0A62	$0870			MOVF	STACK_0, W
$0A63	$00F1			MOVWF	STACK_1
$0A64	$0878			MOVF	STACK_8, W
$0A65	$00F0			MOVWF	STACK_0
$0A66	$01F8			CLRF	STACK_8
$0A67	$15A0			BSF	__math_tempbD, 3
$0A68	$0872			MOVF	STACK_2, W
$0A69	$1D03			BTFSS	STATUS, Z
$0A6A	$2A7C			GOTO	NORM4032
$0A6B	$0871			MOVF	STACK_1, W
$0A6C	$00F2			MOVWF	STACK_2
$0A6D	$0870			MOVF	STACK_0, W
$0A6E	$00F1			MOVWF	STACK_1
$0A6F	$01F0			CLRF	STACK_0
$0A70	$11A0			BCF	__math_tempbD, 3
$0A71	$1620			BSF	__math_tempbD, 4
$0A72	$0872			MOVF	STACK_2, W
$0A73	$1D03			BTFSS	STATUS, Z
$0A74	$2A7C			GOTO	NORM4032
$0A75	$0871			MOVF	STACK_1, W
$0A76	$00F2			MOVWF	STACK_2
$0A77	$01F1			CLRF	STACK_1
$0A78	$15A0			BSF	__math_tempbD, 3
$0A79	$0872			MOVF	STACK_2, W
$0A7A	$1903			BTFSC	STATUS, Z
$0A7B	$2A9E			GOTO	JMPRES032
$0A7C	$	NORM4032:
$0A7C	$0820			MOVF	__math_tempbD, W
$0A7D	$02F3			SUBWF	STACK_3, F
$0A7E	$1D03			BTFSS	STATUS, Z
$0A7F	$1C03			BTFSS	STATUS, C
$0A80	$2AA2			GOTO	JMPSETFUN32
$0A81	$1003			BCF	STATUS, C
$0A82	$	NORM4032A:
$0A82	$1BF2			BTFSC	STACK_2, 7
$0A83	$2A8B			GOTO	NRMRND4032
$0A84	$0DF8			RLF	STACK_8, F
$0A85	$0DF0			RLF	STACK_0, F
$0A86	$0DF1			RLF	STACK_1, F
$0A87	$0DF2			RLF	STACK_2, F
$0A88	$0BF3			DECFSZ	STACK_3, F
$0A89	$2A82			GOTO	NORM4032A
$0A8A	$2AA2			GOTO	JMPSETFUN32
$0A8B	$	NRMRND4032:
$0A8B	$1B7B			BTFSC	STACK_11, 6
$0A8C	$1C70			BTFSS	STACK_0, 0
$0A8D	$2AA6			GOTO	JMPFIXSIGN32
$0A8E	$1FF8			BTFSS	STACK_8, 7
$0A8F	$2AA6			GOTO	JMPFIXSIGN32
$0A90	$0AF0			INCF	STACK_0, F
$0A91	$1903			BTFSC	STATUS, Z
$0A92	$0AF1			INCF	STACK_1, F
$0A93	$1903			BTFSC	STATUS, Z
$0A94	$0AF2			INCF	STACK_2, F
$0A95	$1D03			BTFSS	STATUS, Z
$0A96	$2AA6			GOTO	JMPFIXSIGN32
$0A97	$0CF2			RRF	STACK_2, F
$0A98	$0CF1			RRF	STACK_1, F
$0A99	$0CF0			RRF	STACK_0, F
$0A9A	$0AF3			INCF	STACK_3, F
$0A9B	$1903			BTFSC	STATUS, Z
$0A9C	$2AAA			GOTO	JMPSETFOV32
$0A9D	$2AA6			GOTO	JMPFIXSIGN32
$0A9E	$	JMPRES032:
$0A9E	$3001			MOVLW	0x01
$0A9F	$00FC			MOVWF	STACK_12
$0AA0	$2573			CALL	_RES032
$0AA1	$2AAF			GOTO	NRM4032EEE
$0AA2	$	JMPSETFUN32:
$0AA2	$3002			MOVLW	0x02
$0AA3	$00FC			MOVWF	STACK_12
$0AA4	$255F			CALL	_SETFUN32
$0AA5	$2AAF			GOTO	NRM4032EEE
$0AA6	$	JMPFIXSIGN32:
$0AA6	$3004			MOVLW	0x04
$0AA7	$00FC			MOVWF	STACK_12
$0AA8	$25A0			CALL	_FIXSIGN32
$0AA9	$2AAF			GOTO	NRM4032EEE
$0AAA	$	JMPSETFOV32:
$0AAA	$3008			MOVLW	0x08
$0AAB	$00FC			MOVWF	STACK_12
$0AAC	$118A			BCF	PCLATH, 3
$0AAD	$2705			CALL	_SETFOV32
$0AAE	$158A			BSF	PCLATH, 3
$0AAF	$	NRM4032EEE:
$0AAF	$0000			NOP
$0AB0	$0008			RETURN
$0B43	$	_NRM3232:
$0B43	$1303			BCF	STATUS, RP1
$0B44	$1283			BCF	STATUS, RP0
$0B45	$01A0			CLRF	__math_tempbD
$0B46	$0872			MOVF	STACK_2, W
$0B47	$1D03			BTFSS	STATUS, Z
$0B48	$2B5A			GOTO	NORM3232
$0B49	$0871			MOVF	STACK_1, W
$0B4A	$00F2			MOVWF	STACK_2
$0B4B	$0870			MOVF	STACK_0, W
$0B4C	$00F1			MOVWF	STACK_1
$0B4D	$01F0			CLRF	STACK_0
$0B4E	$15A0			BSF	__math_tempbD, 3
$0B4F	$0872			MOVF	STACK_2, W
$0B50	$1D03			BTFSS	STATUS, Z
$0B51	$2B5A			GOTO	NORM3232
$0B52	$0871			MOVF	STACK_1, W
$0B53	$00F2			MOVWF	STACK_2
$0B54	$01F1			CLRF	STACK_1
$0B55	$11A0			BCF	__math_tempbD, 3
$0B56	$1620			BSF	__math_tempbD, 4
$0B57	$0872			MOVF	STACK_2, W
$0B58	$1903			BTFSC	STATUS, Z
$0B59	$2B68			GOTO	JPNRES032
$0B5A	$	NORM3232:
$0B5A	$0820			MOVF	__math_tempbD, W
$0B5B	$02F3			SUBWF	STACK_3, F
$0B5C	$1D03			BTFSS	STATUS, Z
$0B5D	$1C03			BTFSS	STATUS, C
$0B5E	$2B6C			GOTO	JPNSETFUN32
$0B5F	$1003			BCF	STATUS, C
$0B60	$	NORM3232A:
$0B60	$1BF2			BTFSC	STACK_2, 7
$0B61	$2B70			GOTO	JMPNFIXSIGN32
$0B62	$0DF0			RLF	STACK_0, F
$0B63	$0DF1			RLF	STACK_1, F
$0B64	$0DF2			RLF	STACK_2, F
$0B65	$0BF3			DECFSZ	STACK_3, F
$0B66	$2B60			GOTO	NORM3232A
$0B67	$2B6C			GOTO	JPNSETFUN32
$0B68	$	JPNRES032:
$0B68	$3001			MOVLW	0x01
$0B69	$00FC			MOVWF	STACK_12
$0B6A	$2573			CALL	_RES032
$0B6B	$2B73			GOTO	NORM32EEE
$0B6C	$	JPNSETFUN32:
$0B6C	$3002			MOVLW	0x02
$0B6D	$00FC			MOVWF	STACK_12
$0B6E	$255F			CALL	_SETFUN32
$0B6F	$2B73			GOTO	NORM32EEE
$0B70	$	JMPNFIXSIGN32:
$0B70	$3004			MOVLW	0x04
$0B71	$00FC			MOVWF	STACK_12
$0B72	$25A0			CALL	_FIXSIGN32
$0B73	$	NORM32EEE:
$0B73	$0008			RETURN
$0D55	$	_Lcd_Chr_CP:
$0D55	$1303			BCF	STATUS, RP1
$0D56	$1283			BCF	STATUS, RP0
$0D57	$01A7			CLRF	LCD_cmd_status, 1
$0D58	$086E			MOVF	FARG_Lcd_Chr_CP+0, 0
$0D59	$1683			BSF	STATUS, RP0
$0D5A	$00C6			MOVWF	FARG_Lcd_Cmd+0
$0D5B	$22B1			CALL	_Lcd_Cmd
$0D5C	$3001			MOVLW	1
$0D5D	$00A7			MOVWF	LCD_cmd_status
$0D5E	$0008			RETURN
$0D92	$	_____DoICP:
$0D92	$1303			BCF	STATUS, RP1
$0D93	$1283			BCF	STATUS, RP0
$0D94	$0829			MOVF	___DoICPHiAddr, 0
$0D95	$008A			MOVWF	PCLATH
$0D96	$082A			MOVF	___DoICPLoAddr, 0
$0D97	$0082			MOVWF	PCL
$0D98	$0008			RETURN
$0BBE	$	_Adc_Read:
$0BBE	$1303			BCF	STATUS, RP1
$0BBF	$1283			BCF	STATUS, RP0
$0BC0	$019F			CLRF	ADCON0, 1
$0BC1	$30C0			MOVLW	192
$0BC2	$049F			IORWF	ADCON0, 1
$0BC3	$1683			BSF	STATUS, RP0
$0BC4	$171F			BSF	ADCON1, 6
$0BC5	$179F			BSF	ADCON1, 7
$0BC6	$1283			BCF	STATUS, RP0
$0BC7	$086E			MOVF	FARG_Adc_Read+0, 0
$0BC8	$00F0			MOVWF	STACK_0
$0BC9	$0DF0			RLF	STACK_0, 1
$0BCA	$1070			BCF	STACK_0, 0
$0BCB	$0DF0			RLF	STACK_0, 1
$0BCC	$1070			BCF	STACK_0, 0
$0BCD	$0DF0			RLF	STACK_0, 1
$0BCE	$1070			BCF	STACK_0, 0
$0BCF	$0870			MOVF	STACK_0, 0
$0BD0	$049F			IORWF	ADCON0, 1
$0BD1	$141F			BSF	ADCON0, 0
$0BD2	$2599			CALL	_Delay_22us
$0BD3	$151F			BSF	ADCON0, 2
$0BD4	$	L_Adc_Read_0:
$0BD4	$1D1F			BTFSS	ADCON0, 2
$0BD5	$2BD8			GOTO	L_Adc_Read_1
$0BD6	$0000			NOP
$0BD7	$2BD4			GOTO	L_Adc_Read_0
$0BD8	$	L_Adc_Read_1:
$0BD8	$101F			BCF	ADCON0, 0
$0BD9	$3008			MOVLW	8
$0BDA	$00F2			MOVWF	STACK_2
$0BDB	$081E			MOVF	ADRESH, 0
$0BDC	$00F0			MOVWF	STACK_0
$0BDD	$01F1			CLRF	STACK_0+1
$0BDE	$0872			MOVF	STACK_2, 0
$0BDF	$	L_Adc_Read_2:
$0BDF	$1903			BTFSC	STATUS, Z
$0BE0	$2BE6			GOTO	L_Adc_Read_3
$0BE1	$0DF0			RLF	STACK_0, 1
$0BE2	$0DF1			RLF	STACK_0+1, 1
$0BE3	$1070			BCF	STACK_0, 0
$0BE4	$3FFF			ADDLW	255
$0BE5	$2BDF			GOTO	L_Adc_Read_2
$0BE6	$	L_Adc_Read_3:
$0BE6	$1683			BSF	STATUS, RP0
$0BE7	$081E			MOVF	ADRESL, 0
$0BE8	$04F0			IORWF	STACK_0, 1
$0BE9	$3000			MOVLW	0
$0BEA	$04F1			IORWF	STACK_0+1, 1
$0BEB	$0008			RETURN
$0CA2	$	_strcpy:
$0CA2	$1303			BCF	STATUS, RP1
$0CA3	$1283			BCF	STATUS, RP0
$0CA4	$086E			MOVF	FARG_strcpy+0, 0
$0CA5	$1683			BSF	STATUS, RP0
$0CA6	$00C5			MOVWF	strcpy_cp_L0
$0CA7	$	L_strcpy_31:
$0CA7	$1303			BCF	STATUS, RP1
$0CA8	$1683			BSF	STATUS, RP0
$0CA9	$0845			MOVF	strcpy_cp_L0, 0
$0CAA	$00F1			MOVWF	STACK_1
$0CAB	$0AC5			INCF	strcpy_cp_L0, 1
$0CAC	$1283			BCF	STATUS, RP0
$0CAD	$086F			MOVF	FARG_strcpy+1, 0
$0CAE	$0084			MOVWF	FSR
$0CAF	$0AEF			INCF	FARG_strcpy+1, 1
$0CB0	$0800			MOVF	INDF, 0
$0CB1	$00F0			MOVWF	STACK_0
$0CB2	$0871			MOVF	STACK_1, 0
$0CB3	$0084			MOVWF	FSR
$0CB4	$0870			MOVF	STACK_0, 0
$0CB5	$0080			MOVWF	INDF
$0CB6	$0871			MOVF	STACK_1, 0
$0CB7	$0084			MOVWF	FSR
$0CB8	$0800			MOVF	INDF, 0
$0CB9	$00F0			MOVWF	STACK_0
$0CBA	$0870			MOVF	STACK_0, 0
$0CBB	$1D03			BTFSS	STATUS, Z
$0CBC	$2CA7			GOTO	L_strcpy_31
$0CBD	$	L_strcpy_32:
$0CBD	$086E			MOVF	FARG_strcpy+0, 0
$0CBE	$00F0			MOVWF	STACK_0
$0CBF	$0008			RETURN
$0AF3	$	_Compare_Double:
$0AF3	$1303			BCF	STATUS, RP1
$0AF4	$1283			BCF	STATUS, RP0
$0AF5	$01FA			CLRF	STACK_10
$0AF6	$0873			MOVF	STACK_3, W
$0AF7	$1D03			BTFSS	STATUS, Z
$0AF8	$147A			BSF	STACK_10, 0
$0AF9	$0877			MOVF	STACK_7, W
$0AFA	$1D03			BTFSS	STATUS, Z
$0AFB	$14FA			BSF	STACK_10, 1
$0AFC	$087A			MOVF	STACK_10, W
$0AFD	$1903			BTFSC	STATUS, Z
$0AFE	$2B3F			GOTO	COMPARE_EQU
$0AFF	$3A03			XORLW	0x03
$0B00	$1903			BTFSC	STATUS, Z
$0B01	$2B0A			GOTO	COMPARE_NOTZERO
$0B02	$187A			BTFSC	STACK_10, 0
$0B03	$2B07			GOTO	COMPARE_XNOTZERO
$0B04	$	COMPARE_YNOTZERO:
$0B04	$1FF6			BTFSS	STACK_6, 7
$0B05	$2B3D			GOTO	COMPARE_LT
$0B06	$2B3B			GOTO	COMPARE_GT
$0B07	$	COMPARE_XNOTZERO:
$0B07	$1FF2			BTFSS	STACK_2, 7
$0B08	$2B3B			GOTO	COMPARE_GT
$0B09	$2B3D			GOTO	COMPARE_LT
$0B0A	$	COMPARE_NOTZERO:
$0B0A	$0872			MOVF	STACK_2, W
$0B0B	$3980			ANDLW	0x80
$0B0C	$00FA			MOVWF	STACK_10
$0B0D	$13F2			BCF	STACK_2, 7
$0B0E	$0876			MOVF	STACK_6, W
$0B0F	$3980			ANDLW	0x80
$0B10	$13F6			BCF	STACK_6, 7
$0B11	$067A			XORWF	STACK_10, W
$0B12	$1903			BTFSC	STATUS, Z
$0B13	$2B18			GOTO	COMPARE_TESTALL
$0B14	$087A			MOVF	STACK_10, W
$0B15	$1903			BTFSC	STATUS, Z
$0B16	$2B3B			GOTO	COMPARE_GT
$0B17	$2B3D			GOTO	COMPARE_LT
$0B18	$	COMPARE_TESTALL:
$0B18	$0877			MOVF	STACK_7, W
$0B19	$0273			SUBWF	STACK_3, W
$0B1A	$1903			BTFSC	STATUS, Z
$0B1B	$2B1F			GOTO	COMPARE_C1
$0B1C	$1C03			BTFSS	STATUS, C
$0B1D	$2B33			GOTO	GT_FALSE
$0B1E	$2B37			GOTO	GT_TRUE
$0B1F	$	COMPARE_C1:
$0B1F	$0876			MOVF	STACK_6, W
$0B20	$0272			SUBWF	STACK_2, W
$0B21	$1903			BTFSC	STATUS, Z
$0B22	$2B26			GOTO	COMPARE_C2
$0B23	$1C03			BTFSS	STATUS, C
$0B24	$2B33			GOTO	GT_FALSE
$0B25	$2B37			GOTO	GT_TRUE
$0B26	$	COMPARE_C2:
$0B26	$0875			MOVF	STACK_5, W
$0B27	$0271			SUBWF	STACK_1, W
$0B28	$1903			BTFSC	STATUS, Z
$0B29	$2B2D			GOTO	COMPARE_C3
$0B2A	$1C03			BTFSS	STATUS, C
$0B2B	$2B33			GOTO	GT_FALSE
$0B2C	$2B37			GOTO	GT_TRUE
$0B2D	$	COMPARE_C3:
$0B2D	$0874			MOVF	STACK_4, W
$0B2E	$0270			SUBWF	STACK_0, W
$0B2F	$1903			BTFSC	STATUS, Z
$0B30	$2B3F			GOTO	COMPARE_EQU
$0B31	$1803			BTFSC	STATUS, C
$0B32	$2B37			GOTO	GT_TRUE
$0B33	$	GT_FALSE:
$0B33	$08FA			MOVF	STACK_10, F
$0B34	$1903			BTFSC	STATUS, Z
$0B35	$2B3D			GOTO	COMPARE_LT
$0B36	$2B3B			GOTO	COMPARE_GT
$0B37	$	GT_TRUE:
$0B37	$08FA			MOVF	STACK_10, F
$0B38	$1903			BTFSC	STATUS, Z
$0B39	$2B3B			GOTO	COMPARE_GT
$0B3A	$2B3D			GOTO	COMPARE_LT
$0B3B	$	COMPARE_GT:
$0B3B	$1403			BSF	STATUS, C
$0B3C	$0008			RETURN
$0B3D	$	COMPARE_LT:
$0B3D	$1003			BCF	STATUS, C
$0B3E	$0008			RETURN
$0B3F	$	COMPARE_EQU:
$0B3F	$1403			BSF	STATUS, C
$0B40	$1503			BSF	STATUS, Z
$0B41	$0008			RETURN
$0B42	$0008			RETURN
$098C	$	_Mul_32x32_FP:
$098C	$1303			BCF	STATUS, RP1
$098D	$1283			BCF	STATUS, RP0
$098E	$	FPM32:
$098E	$01FB			CLRF	STACK_11
$098F	$0873			MOVF	STACK_3, W
$0990	$1D03			BTFSS	STATUS, Z
$0991	$0877			MOVF	STACK_7, W
$0992	$1903			BTFSC	STATUS, Z
$0993	$29E3			GOTO	JPMRES032
$0994	$	M32BNE0:
$0994	$0872			MOVF	STACK_2, W
$0995	$0676			XORWF	STACK_6, W
$0996	$00FA			MOVWF	STACK_10
$0997	$0877			MOVF	STACK_7, W
$0998	$07F3			ADDWF	STACK_3, F
$0999	$307E			MOVLW	126
$099A	$1C03			BTFSS	STATUS, C
$099B	$29A0			GOTO	MTUN32
$099C	$02F3			SUBWF	STACK_3, F
$099D	$1803			BTFSC	STATUS, C
$099E	$29E6			GOTO	JPMSETFOV32
$099F	$29A3			GOTO	MOK32
$09A0	$	MTUN32:
$09A0	$02F3			SUBWF	STACK_3, F
$09A1	$1C03			BTFSS	STATUS, C
$09A2	$29EB			GOTO	JPMSETFUN32
$09A3	$	MOK32:
$09A3	$0872			MOVF	STACK_2, W
$09A4	$00F8			MOVWF	STACK_8
$09A5	$0871			MOVF	STACK_1, W
$09A6	$00FC			MOVWF	STACK_12
$09A7	$0870			MOVF	STACK_0, W
$09A8	$00FD			MOVWF	STACK_13
$09A9	$17F8			BSF	STACK_8, 7
$09AA	$17F6			BSF	STACK_6, 7
$09AB	$1003			BCF	STATUS, C
$09AC	$01F2			CLRF	STACK_2
$09AD	$01F1			CLRF	STACK_1
$09AE	$01F0			CLRF	STACK_0
$09AF	$3018			MOVLW	24
$09B0	$00A0			MOVWF	__math_tempbD
$09B1	$	MLOOP32:
$09B1	$1C7D			BTFSS	STACK_13, 0
$09B2	$29BD			GOTO	MNOADD32
$09B3	$	MADD32:
$09B3	$0874			MOVF	STACK_4, W
$09B4	$07F0			ADDWF	STACK_0, F
$09B5	$0875			MOVF	STACK_5, W
$09B6	$1803			BTFSC	STATUS, C
$09B7	$0F75			INCFSZ	STACK_5, W
$09B8	$07F1			ADDWF	STACK_1, F
$09B9	$0876			MOVF	STACK_6, W
$09BA	$1803			BTFSC	STATUS, C
$09BB	$0F76			INCFSZ	STACK_6, W
$09BC	$07F2			ADDWF	STACK_2, F
$09BD	$	MNOADD32:
$09BD	$0CF2			RRF	STACK_2, F
$09BE	$0CF1			RRF	STACK_1, F
$09BF	$0CF0			RRF	STACK_0, F
$09C0	$0CF8			RRF	STACK_8, F
$09C1	$0CFC			RRF	STACK_12, F
$09C2	$0CFD			RRF	STACK_13, F
$09C3	$1003			BCF	STATUS, C
$09C4	$0BA0			DECFSZ	__math_tempbD, F
$09C5	$29B1			GOTO	MLOOP32
$09C6	$1BF2			BTFSC	STACK_2, 7
$09C7	$29CD			GOTO	MROUND32
$09C8	$0DF8			RLF	STACK_8, F
$09C9	$0DF0			RLF	STACK_0, F
$09CA	$0DF1			RLF	STACK_1, F
$09CB	$0DF2			RLF	STACK_2, F
$09CC	$03F3			DECF	STACK_3, F
$09CD	$	MROUND32:
$09CD	$1B7B			BTFSC	STACK_11, 6
$09CE	$1C70			BTFSS	STACK_0, 0
$09CF	$29DF			GOTO	MUL32OK
$09D0	$1FF8			BTFSS	STACK_8, 7
$09D1	$29DF			GOTO	MUL32OK
$09D2	$0AF0			INCF	STACK_0, F
$09D3	$1903			BTFSC	STATUS, Z
$09D4	$0AF1			INCF	STACK_1, F
$09D5	$1903			BTFSC	STATUS, Z
$09D6	$0AF2			INCF	STACK_2, F
$09D7	$1D03			BTFSS	STATUS, Z
$09D8	$29DF			GOTO	MUL32OK
$09D9	$0CF2			RRF	STACK_2, F
$09DA	$0CF1			RRF	STACK_1, F
$09DB	$0CF0			RRF	STACK_0, F
$09DC	$0AF3			INCF	STACK_3, F
$09DD	$1903			BTFSC	STATUS, Z
$09DE	$29E6			GOTO	JPMSETFOV32
$09DF	$	MUL32OK:
$09DF	$1FFA			BTFSS	STACK_10, 7
$09E0	$13F2			BCF	STACK_2, 7
$09E1	$3000			MOVLW	0x00
$09E2	$29ED			GOTO	MUL32EEE
$09E3	$	JPMRES032:
$09E3	$3001			MOVLW	0x01
$09E4	$2573			CALL	_RES032
$09E5	$29ED			GOTO	MUL32EEE
$09E6	$	JPMSETFOV32:
$09E6	$3002			MOVLW	0x02
$09E7	$118A			BCF	PCLATH, 3
$09E8	$2705			CALL	_SETFOV32
$09E9	$158A			BSF	PCLATH, 3
$09EA	$29ED			GOTO	MUL32EEE
$09EB	$	JPMSETFUN32:
$09EB	$3004			MOVLW	0x04
$09EC	$255F			CALL	_SETFUN32
$09ED	$	MUL32EEE:
$09ED	$0000			NOP
$09EE	$0008			RETURN
$0D1F	$	_Div_8x8_U:
$0D1F	$1303			BCF	STATUS, RP1
$0D20	$1283			BCF	STATUS, RP0
$0D21	$01F8			CLRF	STACK_8, F
$0D22	$3008			MOVLW	8
$0D23	$00FC			MOVWF	STACK_12
$0D24	$0D70			RLF	STACK_0, W
$0D25	$0DF8			RLF	STACK_8, F
$0D26	$0874			MOVF	STACK_4, W
$0D27	$02F8			SUBWF	STACK_8, F
$0D28	$1803			BTFSC	STATUS, C
$0D29	$2D2C			GOTO	$+3
$0D2A	$07F8			ADDWF	STACK_8, F
$0D2B	$1003			BCF	STATUS, C
$0D2C	$0DF0			RLF	STACK_0, F
$0D2D	$0BFC			DECFSZ	STACK_12, F
$0D2E	$2D24			GOTO	$-10
$0D2F	$0008			RETURN
$0DA6	$	_SETFDZ32:
$0DA6	$1303			BCF	STATUS, RP1
$0DA7	$1283			BCF	STATUS, RP0
$0DA8	$15FB			BSF	STACK_11, 3
$0DA9	$30FF			MOVLW	0xFF
$0DAA	$0008			RETURN
$0800	$	_Add_32x32_FP:
$0800	$1303			BCF	STATUS, RP1
$0801	$1283			BCF	STATUS, RP0
$0802	$0872			MOVF	STACK_2, W
$0803	$0676			XORWF	STACK_6, W
$0804	$00A0			MOVWF	__math_tempbD
$0805	$01F8			CLRF	STACK_8
$0806	$01F9			CLRF	STACK_9
$0807	$0873			MOVF	STACK_3, W
$0808	$0277			SUBWF	STACK_7, W
$0809	$1C03			BTFSS	STATUS, C
$080A	$2823			GOTO	USEA32
$080B	$0877			MOVF	STACK_7, W
$080C	$00FD			MOVWF	STACK_13
$080D	$0873			MOVF	STACK_3, W
$080E	$00F7			MOVWF	STACK_7
$080F	$087D			MOVF	STACK_13, W
$0810	$00F3			MOVWF	STACK_3
$0811	$0876			MOVF	STACK_6, W
$0812	$00FD			MOVWF	STACK_13
$0813	$0872			MOVF	STACK_2, W
$0814	$00F6			MOVWF	STACK_6
$0815	$087D			MOVF	STACK_13, W
$0816	$00F2			MOVWF	STACK_2
$0817	$0875			MOVF	STACK_5, W
$0818	$00FD			MOVWF	STACK_13
$0819	$0871			MOVF	STACK_1, W
$081A	$00F5			MOVWF	STACK_5
$081B	$087D			MOVF	STACK_13, W
$081C	$00F1			MOVWF	STACK_1
$081D	$0874			MOVF	STACK_4, W
$081E	$00FD			MOVWF	STACK_13
$081F	$0870			MOVF	STACK_0, W
$0820	$00F4			MOVWF	STACK_4
$0821	$087D			MOVF	STACK_13, W
$0822	$00F0			MOVWF	STACK_0
$0823	$	USEA32:
$0823	$0877			MOVF	STACK_7, W
$0824	$1903			BTFSC	STATUS, Z
$0825	$289E			GOTO	JMPEEE
$0826	$0872			MOVF	STACK_2, W
$0827	$00FA			MOVWF	STACK_10
$0828	$17F2			BSF	STACK_2, 7
$0829	$17F6			BSF	STACK_6, 7
$082A	$0877			MOVF	STACK_7, W
$082B	$0273			SUBWF	STACK_3, W
$082C	$00F7			MOVWF	STACK_7
$082D	$1903			BTFSC	STATUS, Z
$082E	$2856			GOTO	ALIGNED32
$082F	$3008			MOVLW	8
$0830	$0277			SUBWF	STACK_7, W
$0831	$1C03			BTFSS	STATUS, C
$0832	$284C			GOTO	ALIGNB32
$0833	$00F7			MOVWF	STACK_7
$0834	$0874			MOVF	STACK_4, W
$0835	$00F9			MOVWF	STACK_9
$0836	$0875			MOVF	STACK_5, W
$0837	$00F4			MOVWF	STACK_4
$0838	$0876			MOVF	STACK_6, W
$0839	$00F5			MOVWF	STACK_5
$083A	$01F6			CLRF	STACK_6
$083B	$3008			MOVLW	8
$083C	$0277			SUBWF	STACK_7, W
$083D	$1C03			BTFSS	STATUS, C
$083E	$284C			GOTO	ALIGNB32
$083F	$00F7			MOVWF	STACK_7
$0840	$0874			MOVF	STACK_4, W
$0841	$00F9			MOVWF	STACK_9
$0842	$0875			MOVF	STACK_5, W
$0843	$00F4			MOVWF	STACK_4
$0844	$01F5			CLRF	STACK_5
$0845	$3008			MOVLW	8
$0846	$0277			SUBWF	STACK_7, W
$0847	$1C03			BTFSS	STATUS, C
$0848	$284C			GOTO	ALIGNB32
$0849	$087A			MOVF	STACK_10, W
$084A	$00F2			MOVWF	STACK_2
$084B	$289E			GOTO	JMPEEE
$084C	$	ALIGNB32:
$084C	$0877			MOVF	STACK_7, W
$084D	$1903			BTFSC	STATUS, Z
$084E	$2856			GOTO	ALIGNED32
$084F	$	ALOOPB32:
$084F	$1003			BCF	STATUS, C
$0850	$0CF6			RRF	STACK_6, F
$0851	$0CF5			RRF	STACK_5, F
$0852	$0CF4			RRF	STACK_4, F
$0853	$0CF9			RRF	STACK_9, F
$0854	$0BF7			DECFSZ	STACK_7, F
$0855	$284F			GOTO	ALOOPB32
$0856	$	ALIGNED32:
$0856	$1FA0			BTFSS	__math_tempbD, 7
$0857	$2863			GOTO	AOK32
$0858	$09F9			COMF	STACK_9, F
$0859	$09F4			COMF	STACK_4, F
$085A	$09F5			COMF	STACK_5, F
$085B	$09F6			COMF	STACK_6, F
$085C	$0AF9			INCF	STACK_9, F
$085D	$1903			BTFSC	STATUS, Z
$085E	$0AF4			INCF	STACK_4, F
$085F	$1903			BTFSC	STATUS, Z
$0860	$0AF5			INCF	STACK_5, F
$0861	$1903			BTFSC	STATUS, Z
$0862	$0AF6			INCF	STACK_6, F
$0863	$	AOK32:
$0863	$0879			MOVF	STACK_9, W
$0864	$07F8			ADDWF	STACK_8, F
$0865	$0874			MOVF	STACK_4, W
$0866	$1803			BTFSC	STATUS, C
$0867	$0F74			INCFSZ	STACK_4, W
$0868	$07F0			ADDWF	STACK_0, F
$0869	$0875			MOVF	STACK_5, W
$086A	$1803			BTFSC	STATUS, C
$086B	$0F75			INCFSZ	STACK_5, W
$086C	$07F1			ADDWF	STACK_1, F
$086D	$0876			MOVF	STACK_6, W
$086E	$1803			BTFSC	STATUS, C
$086F	$0F76			INCFSZ	STACK_6, W
$0870	$07F2			ADDWF	STACK_2, F
$0871	$1BA0			BTFSC	__math_tempbD, 7
$0872	$287C			GOTO	ACOMP32
$0873	$1C03			BTFSS	STATUS, C
$0874	$288C			GOTO	JMPNRMRND4032
$0875	$0CF2			RRF	STACK_2, F
$0876	$0CF1			RRF	STACK_1, F
$0877	$0CF0			RRF	STACK_0, F
$0878	$0CF8			RRF	STACK_8, F
$0879	$0FF3			INCFSZ	STACK_3, F
$087A	$288C			GOTO	JMPNRMRND4032
$087B	$2898			GOTO	ADD_JMPSETFOV32
$087C	$	ACOMP32:
$087C	$1803			BTFSC	STATUS, C
$087D	$2890			GOTO	JMPNRM4032
$087E	$09F8			COMF	STACK_8, F
$087F	$09F0			COMF	STACK_0, F
$0880	$09F1			COMF	STACK_1, F
$0881	$09F2			COMF	STACK_2, F
$0882	$0AF8			INCF	STACK_8, F
$0883	$1903			BTFSC	STATUS, Z
$0884	$0AF0			INCF	STACK_0, F
$0885	$1903			BTFSC	STATUS, Z
$0886	$0AF1			INCF	STACK_1, F
$0887	$1903			BTFSC	STATUS, Z
$0888	$0AF2			INCF	STACK_2, F
$0889	$3080			MOVLW	0x80
$088A	$06FA			XORWF	STACK_10, F
$088B	$2894			GOTO	JMPNRM32
$088C	$	JMPNRMRND4032:
$088C	$3001			MOVLW	0x01
$088D	$00FC			MOVWF	STACK_12
$088E	$2253			CALL	_NRM4032
$088F	$28A0			GOTO	ADD32EEE
$0890	$	JMPNRM4032:
$0890	$3002			MOVLW	0x02
$0891	$00FC			MOVWF	STACK_12
$0892	$2253			CALL	_NRM4032
$0893	$28A0			GOTO	ADD32EEE
$0894	$	JMPNRM32:
$0894	$3004			MOVLW	0x04
$0895	$00FC			MOVWF	STACK_12
$0896	$2343			CALL	_NRM3232
$0897	$28A0			GOTO	ADD32EEE
$0898	$	ADD_JMPSETFOV32:
$0898	$3008			MOVLW	0x08
$0899	$00FC			MOVWF	STACK_12
$089A	$118A			BCF	PCLATH, 3
$089B	$2705			CALL	_SETFOV32
$089C	$158A			BSF	PCLATH, 3
$089D	$28A0			GOTO	ADD32EEE
$089E	$	JMPEEE:
$089E	$3000			MOVLW	0x00
$089F	$00FC			MOVWF	STACK_12
$08A0	$	ADD32EEE:
$08A0	$0000			NOP
$08A1	$0008			RETURN
$0CEA	$	_LCD_Out_CP:
$0CEA	$1303			BCF	STATUS, RP1
$0CEB	$1283			BCF	STATUS, RP0
$0CEC	$01EA			CLRF	LCD_Out_CP_i_L0, 1
$0CED	$	L_LCD_Out_CP_15:
$0CED	$086A			MOVF	LCD_Out_CP_i_L0, 0
$0CEE	$0769			ADDWF	FARG_LCD_Out_CP+0, 0
$0CEF	$0084			MOVWF	FSR
$0CF0	$0800			MOVF	INDF, 0
$0CF1	$00F0			MOVWF	STACK_0
$0CF2	$0870			MOVF	STACK_0, 0
$0CF3	$1903			BTFSC	STATUS, Z
$0CF4	$2CFD			GOTO	L_LCD_Out_CP_16
$0CF5	$086A			MOVF	LCD_Out_CP_i_L0, 0
$0CF6	$0769			ADDWF	FARG_LCD_Out_CP+0, 0
$0CF7	$0084			MOVWF	FSR
$0CF8	$0800			MOVF	INDF, 0
$0CF9	$00EE			MOVWF	FARG_Lcd_Chr_CP+0
$0CFA	$2555			CALL	_Lcd_Chr_CP
$0CFB	$0AEA			INCF	LCD_Out_CP_i_L0, 1
$0CFC	$2CED			GOTO	L_LCD_Out_CP_15
$0CFD	$	L_LCD_Out_CP_16:
$0CFD	$0008			RETURN
$0C1D	$	_codetxt_to_ramtxt:
;multimeter.c,15 :: 		char* codetxt_to_ramtxt(const char* ctxt){    //function for saving RAM space by copying from ROM to RAM when needed
;multimeter.c,18 :: 		for(i =0; txt[i] = ctxt[i]; i++);
$0C1D	$1303			BCF	STATUS, RP1
$0C1E	$1283			BCF	STATUS, RP0
$0C1F	$01EB			CLRF	codetxt_to_ramtxt_i_L0, 1
$0C20	$	L_codetxt_to_ramtxt_0:
$0C20	$086B			MOVF	codetxt_to_ramtxt_i_L0, 0
$0C21	$3F46			ADDLW	codetxt_to_ramtxt_txt_L0
$0C22	$00F2			MOVWF	STACK_2
$0C23	$086B			MOVF	codetxt_to_ramtxt_i_L0, 0
$0C24	$0769			ADDWF	FARG_codetxt_to_ramtxt+0, 0
$0C25	$00F0			MOVWF	STACK_0
$0C26	$086A			MOVF	FARG_codetxt_to_ramtxt+1, 0
$0C27	$1803			BTFSC	STATUS, C
$0C28	$3F01			ADDLW	1
$0C29	$00F1			MOVWF	STACK_0+1
$0C2A	$0870			MOVF	STACK_0, 0
$0C2B	$00AA			MOVWF	___DoICPLoAddr
$0C2C	$0871			MOVF	STACK_0+1, 0
$0C2D	$00A9			MOVWF	___DoICPHiAddr
$0C2E	$080A			MOVF	PCLATH, 0
$0C2F	$00A8			MOVWF	___DoICPSavePCLATH
$0C30	$2592			CALL	_____DoICP
$0C31	$00F0			MOVWF	STACK_0
$0C32	$0828			MOVF	___DoICPSavePCLATH, 0
$0C33	$008A			MOVWF	PCLATH
$0C34	$0872			MOVF	STACK_2, 0
$0C35	$0084			MOVWF	FSR
$0C36	$0870			MOVF	STACK_0, 0
$0C37	$0080			MOVWF	INDF
$0C38	$0872			MOVF	STACK_2, 0
$0C39	$0084			MOVWF	FSR
$0C3A	$0800			MOVF	INDF, 0
$0C3B	$00F0			MOVWF	STACK_0
$0C3C	$0870			MOVF	STACK_0, 0
$0C3D	$1903			BTFSC	STATUS, Z
$0C3E	$2C41			GOTO	L_codetxt_to_ramtxt_1
$0C3F	$	L_codetxt_to_ramtxt_2:
$0C3F	$0AEB			INCF	codetxt_to_ramtxt_i_L0, 1
$0C40	$2C20			GOTO	L_codetxt_to_ramtxt_0
$0C41	$	L_codetxt_to_ramtxt_1:
;multimeter.c,19 :: 		return txt;
$0C41	$3046			MOVLW	codetxt_to_ramtxt_txt_L0
$0C42	$00F0			MOVWF	STACK_0
;multimeter.c,20 :: 		}
$0C43	$0008			RETURN
$0BEC	$	table___menu:
;multimeter.c,10 :: 		unsigned const char menu[4][12]={"Volt Meter ","Amp Meter ","Cap Meter ","Res Meter "};
$0BEC	$3456			RETLW	86
$0BED	$346F			RETLW	111
$0BEE	$346C			RETLW	108
$0BEF	$3474			RETLW	116
$0BF0	$3420			RETLW	32
$0BF1	$344D			RETLW	77
$0BF2	$3465			RETLW	101
$0BF3	$3474			RETLW	116
$0BF4	$3465			RETLW	101
$0BF5	$3472			RETLW	114
$0BF6	$3420			RETLW	32
$0BF7	$3400			RETLW	0
$0BF8	$3441			RETLW	65
$0BF9	$346D			RETLW	109
$0BFA	$3470			RETLW	112
$0BFB	$3420			RETLW	32
$0BFC	$344D			RETLW	77
$0BFD	$3465			RETLW	101
$0BFE	$3474			RETLW	116
$0BFF	$3465			RETLW	101
$0C00	$3472			RETLW	114
$0C01	$3420			RETLW	32
$0C02	$3400			RETLW	0
$0C03	$3400			RETLW	0
$0C04	$3443			RETLW	67
$0C05	$3461			RETLW	97
$0C06	$3470			RETLW	112
$0C07	$3420			RETLW	32
$0C08	$344D			RETLW	77
$0C09	$3465			RETLW	101
$0C0A	$3474			RETLW	116
$0C0B	$3465			RETLW	101
$0C0C	$3472			RETLW	114
$0C0D	$3420			RETLW	32
$0C0E	$3400			RETLW	0
$0C0F	$3400			RETLW	0
$0C10	$3452			RETLW	82
$0C11	$3465			RETLW	101
$0C12	$3473			RETLW	115
$0C13	$3420			RETLW	32
$0C14	$344D			RETLW	77
$0C15	$3465			RETLW	101
$0C16	$3474			RETLW	116
$0C17	$3465			RETLW	101
$0C18	$3472			RETLW	114
$0C19	$3420			RETLW	32
$0C1A	$3400			RETLW	0
$0C1B	$3400			RETLW	0
$0C1C	$0008			RETURN
$0D8B	$	table___msg1:
;multimeter.c,12 :: 		unsigned const char msg1[6]="mode:";
$0D8B	$346D			RETLW	109
$0D8C	$346F			RETLW	111
$0D8D	$3464			RETLW	100
$0D8E	$3465			RETLW	101
$0D8F	$343A			RETLW	58
$0D90	$3400			RETLW	0
$0D91	$0008			RETURN
$0C87	$	_get_volt_value:
;multimeter.c,39 :: 		void get_volt_value(unsigned char x,unsigned char y){
;multimeter.c,40 :: 		adc_value_pos=ADC_Read(x);
$0C87	$1303			BCF	STATUS, RP1
$0C88	$1283			BCF	STATUS, RP0
$0C89	$0869			MOVF	FARG_get_volt_value+0, 0
$0C8A	$00EE			MOVWF	FARG_Adc_Read+0
$0C8B	$23BE			CALL	_Adc_Read
$0C8C	$0870			MOVF	STACK_0, 0
$0C8D	$1283			BCF	STATUS, RP0
$0C8E	$00AB			MOVWF	_adc_value_pos
$0C8F	$0871			MOVF	STACK_0+1, 0
$0C90	$00AC			MOVWF	_adc_value_pos+1
;multimeter.c,41 :: 		adc_value_neg=ADC_Read(y);
$0C91	$086A			MOVF	FARG_get_volt_value+1, 0
$0C92	$00EE			MOVWF	FARG_Adc_Read+0
$0C93	$23BE			CALL	_Adc_Read
$0C94	$0870			MOVF	STACK_0, 0
$0C95	$1283			BCF	STATUS, RP0
$0C96	$00AD			MOVWF	_adc_value_neg
$0C97	$0871			MOVF	STACK_0+1, 0
$0C98	$00AE			MOVWF	_adc_value_neg+1
;multimeter.c,42 :: 		adc_value=adc_value_pos-adc_value_neg;
$0C99	$0870			MOVF	STACK_0, 0
$0C9A	$022B			SUBWF	_adc_value_pos, 0
$0C9B	$00AF			MOVWF	_adc_value
$0C9C	$0871			MOVF	STACK_0+1, 0
$0C9D	$1C03			BTFSS	STATUS, C
$0C9E	$3F01			ADDLW	1
$0C9F	$022C			SUBWF	_adc_value_pos+1, 0
$0CA0	$00B0			MOVWF	_adc_value+1
;multimeter.c,43 :: 		}
$0CA1	$0008			RETURN
$0038	$	_FloatToStr:
$0038	$304E			MOVLW	78
$0039	$1303			BCF	STATUS, RP1
$003A	$1683			BSF	STATUS, RP0
$003B	$00B3			MOVWF	lstr1_conv+0
$003C	$3061			MOVLW	97
$003D	$00B4			MOVWF	lstr1_conv+1
$003E	$304E			MOVLW	78
$003F	$00B5			MOVWF	lstr1_conv+2
$0040	$01B6			CLRF	lstr1_conv+3
$0041	$3030			MOVLW	48
$0042	$00B7			MOVWF	lstr2_conv+0
$0043	$01B8			CLRF	lstr2_conv+1
$0044	$3049			MOVLW	73
$0045	$00B9			MOVWF	lstr3_conv+0
$0046	$304E			MOVLW	78
$0047	$00BA			MOVWF	lstr3_conv+1
$0048	$3046			MOVLW	70
$0049	$00BB			MOVWF	lstr3_conv+2
$004A	$01BC			CLRF	lstr3_conv+3
$004B	$01BD			CLRF	FloatToStr_bpoint_L0, 1
$004C	$01C0			CLRF	FloatToStr_dexpon_L0, 1
$004D	$1283			BCF	STATUS, RP0
$004E	$0869			MOVF	FARG_FloatToStr+0, 0
$004F	$1683			BSF	STATUS, RP0
$0050	$00C1			MOVWF	FloatToStr_un_L0
$0051	$1283			BCF	STATUS, RP0
$0052	$086A			MOVF	FARG_FloatToStr+1, 0
$0053	$1683			BSF	STATUS, RP0
$0054	$00C2			MOVWF	FloatToStr_un_L0+1
$0055	$1283			BCF	STATUS, RP0
$0056	$086B			MOVF	FARG_FloatToStr+2, 0
$0057	$1683			BSF	STATUS, RP0
$0058	$00C3			MOVWF	FloatToStr_un_L0+2
$0059	$1283			BCF	STATUS, RP0
$005A	$086C			MOVF	FARG_FloatToStr+3, 0
$005B	$1683			BSF	STATUS, RP0
$005C	$00C4			MOVWF	FloatToStr_un_L0+3
$005D	$0844			MOVF	FloatToStr_un_L0+3, 0
$005E	$3AFF			XORLW	255
$005F	$1D03			BTFSS	STATUS, Z
$0060	$286B			GOTO	L_FloatToStr_60
$0061	$0843			MOVF	FloatToStr_un_L0+2, 0
$0062	$3AFF			XORLW	255
$0063	$1D03			BTFSS	STATUS, Z
$0064	$286B			GOTO	L_FloatToStr_60
$0065	$0842			MOVF	FloatToStr_un_L0+1, 0
$0066	$3AFF			XORLW	255
$0067	$1D03			BTFSS	STATUS, Z
$0068	$286B			GOTO	L_FloatToStr_60
$0069	$0841			MOVF	FloatToStr_un_L0, 0
$006A	$3AFF			XORLW	255
$006B	$	L_FloatToStr_60:
$006B	$1D03			BTFSS	STATUS, Z
$006C	$2878			GOTO	L_FloatToStr_29
$006D	$1283			BCF	STATUS, RP0
$006E	$086D			MOVF	FARG_FloatToStr+4, 0
$006F	$00EE			MOVWF	FARG_strcpy+0
$0070	$30B3			MOVLW	lstr1_conv
$0071	$00EF			MOVWF	FARG_strcpy+1
$0072	$158A			BSF	PCLATH, 3
$0073	$24A2			CALL	_strcpy
$0074	$118A			BCF	PCLATH, 3
$0075	$3003			MOVLW	3
$0076	$00F0			MOVWF	STACK_0
$0077	$0008			RETURN
$0078	$	L_FloatToStr_29:
$0078	$3001			MOVLW	1
$0079	$1683			BSF	STATUS, RP0
$007A	$00BE			MOVWF	FloatToStr_i_L0
$007B	$1FC3			BTFSS	FloatToStr_un_L0+2, 7
$007C	$2886			GOTO	L_FloatToStr_30
$007D	$3080			MOVLW	128
$007E	$06C3			XORWF	FloatToStr_un_L0+2, 1
$007F	$0ABE			INCF	FloatToStr_i_L0, 1
$0080	$1283			BCF	STATUS, RP0
$0081	$086D			MOVF	FARG_FloatToStr+4, 0
$0082	$0084			MOVWF	FSR
$0083	$302D			MOVLW	45
$0084	$0080			MOVWF	INDF
$0085	$0AED			INCF	FARG_FloatToStr+4, 1
$0086	$	L_FloatToStr_30:
$0086	$3000			MOVLW	0
$0087	$00F0			MOVWF	STACK_0
$0088	$1683			BSF	STATUS, RP0
$0089	$0644			XORWF	FloatToStr_un_L0+3, 0
$008A	$1D03			BTFSS	STATUS, Z
$008B	$2896			GOTO	L_FloatToStr_61
$008C	$0870			MOVF	STACK_0, 0
$008D	$0643			XORWF	FloatToStr_un_L0+2, 0
$008E	$1D03			BTFSS	STATUS, Z
$008F	$2896			GOTO	L_FloatToStr_61
$0090	$0870			MOVF	STACK_0, 0
$0091	$0642			XORWF	FloatToStr_un_L0+1, 0
$0092	$1D03			BTFSS	STATUS, Z
$0093	$2896			GOTO	L_FloatToStr_61
$0094	$0841			MOVF	FloatToStr_un_L0, 0
$0095	$3A00			XORLW	0
$0096	$	L_FloatToStr_61:
$0096	$1D03			BTFSS	STATUS, Z
$0097	$28A2			GOTO	L_FloatToStr_31
$0098	$1283			BCF	STATUS, RP0
$0099	$086D			MOVF	FARG_FloatToStr+4, 0
$009A	$00EE			MOVWF	FARG_strcpy+0
$009B	$30B7			MOVLW	lstr2_conv
$009C	$00EF			MOVWF	FARG_strcpy+1
$009D	$158A			BSF	PCLATH, 3
$009E	$24A2			CALL	_strcpy
$009F	$118A			BCF	PCLATH, 3
$00A0	$01F0			CLRF	STACK_0, 1
$00A1	$0008			RETURN
$00A2	$	L_FloatToStr_31:
$00A2	$1683			BSF	STATUS, RP0
$00A3	$0844			MOVF	FloatToStr_un_L0+3, 0
$00A4	$3A7F			XORLW	127
$00A5	$1D03			BTFSS	STATUS, Z
$00A6	$28B1			GOTO	L_FloatToStr_62
$00A7	$0843			MOVF	FloatToStr_un_L0+2, 0
$00A8	$3A80			XORLW	128
$00A9	$1D03			BTFSS	STATUS, Z
$00AA	$28B1			GOTO	L_FloatToStr_62
$00AB	$0842			MOVF	FloatToStr_un_L0+1, 0
$00AC	$3A00			XORLW	0
$00AD	$1D03			BTFSS	STATUS, Z
$00AE	$28B1			GOTO	L_FloatToStr_62
$00AF	$0841			MOVF	FloatToStr_un_L0, 0
$00B0	$3A00			XORLW	0
$00B1	$	L_FloatToStr_62:
$00B1	$1D03			BTFSS	STATUS, Z
$00B2	$28BF			GOTO	L_FloatToStr_32
$00B3	$1283			BCF	STATUS, RP0
$00B4	$086D			MOVF	FARG_FloatToStr+4, 0
$00B5	$00EE			MOVWF	FARG_strcpy+0
$00B6	$30B9			MOVLW	lstr3_conv
$00B7	$00EF			MOVWF	FARG_strcpy+1
$00B8	$158A			BSF	PCLATH, 3
$00B9	$24A2			CALL	_strcpy
$00BA	$118A			BCF	PCLATH, 3
$00BB	$1683			BSF	STATUS, RP0
$00BC	$083E			MOVF	FloatToStr_i_L0, 0
$00BD	$00F0			MOVWF	STACK_0
$00BE	$0008			RETURN
$00BF	$	L_FloatToStr_32:
$00BF	$	L_FloatToStr_33:
$00BF	$3000			MOVLW	0
$00C0	$00F4			MOVWF	STACK_4
$00C1	$3000			MOVLW	0
$00C2	$00F5			MOVWF	STACK_4+1
$00C3	$3000			MOVLW	0
$00C4	$00F6			MOVWF	STACK_4+2
$00C5	$307F			MOVLW	127
$00C6	$00F7			MOVWF	STACK_4+3
$00C7	$0841			MOVF	FloatToStr_un_L0, 0
$00C8	$00F0			MOVWF	STACK_0
$00C9	$0842			MOVF	FloatToStr_un_L0+1, 0
$00CA	$00F1			MOVWF	STACK_0+1
$00CB	$0843			MOVF	FloatToStr_un_L0+2, 0
$00CC	$00F2			MOVWF	STACK_0+2
$00CD	$0844			MOVF	FloatToStr_un_L0+3, 0
$00CE	$00F3			MOVWF	STACK_0+3
$00CF	$158A			BSF	PCLATH, 3
$00D0	$22F3			CALL	_compare_double
$00D1	$118A			BCF	PCLATH, 3
$00D2	$3001			MOVLW	1
$00D3	$1803			BTFSC	STATUS, C
$00D4	$3000			MOVLW	0
$00D5	$00F0			MOVWF	STACK_0
$00D6	$0870			MOVF	STACK_0, 0
$00D7	$1903			BTFSC	STATUS, Z
$00D8	$28F8			GOTO	L_FloatToStr_34
$00D9	$1683			BSF	STATUS, RP0
$00DA	$0841			MOVF	FloatToStr_un_L0, 0
$00DB	$00F0			MOVWF	STACK_0
$00DC	$0842			MOVF	FloatToStr_un_L0+1, 0
$00DD	$00F1			MOVWF	STACK_0+1
$00DE	$0843			MOVF	FloatToStr_un_L0+2, 0
$00DF	$00F2			MOVWF	STACK_0+2
$00E0	$0844			MOVF	FloatToStr_un_L0+3, 0
$00E1	$00F3			MOVWF	STACK_0+3
$00E2	$3000			MOVLW	0
$00E3	$00F4			MOVWF	STACK_4
$00E4	$3000			MOVLW	0
$00E5	$00F5			MOVWF	STACK_4+1
$00E6	$3020			MOVLW	32
$00E7	$00F6			MOVWF	STACK_4+2
$00E8	$3082			MOVLW	130
$00E9	$00F7			MOVWF	STACK_4+3
$00EA	$158A			BSF	PCLATH, 3
$00EB	$218C			CALL	_mul_32x32_fp
$00EC	$118A			BCF	PCLATH, 3
$00ED	$0870			MOVF	STACK_0, 0
$00EE	$1683			BSF	STATUS, RP0
$00EF	$00C1			MOVWF	FloatToStr_un_L0
$00F0	$0871			MOVF	STACK_0+1, 0
$00F1	$00C2			MOVWF	FloatToStr_un_L0+1
$00F2	$0872			MOVF	STACK_0+2, 0
$00F3	$00C3			MOVWF	FloatToStr_un_L0+2
$00F4	$0873			MOVF	STACK_0+3, 0
$00F5	$00C4			MOVWF	FloatToStr_un_L0+3
$00F6	$03C0			DECF	FloatToStr_dexpon_L0, 1
$00F7	$28BF			GOTO	L_FloatToStr_33
$00F8	$	L_FloatToStr_34:
$00F8	$	L_FloatToStr_35:
$00F8	$1303			BCF	STATUS, RP1
$00F9	$1683			BSF	STATUS, RP0
$00FA	$3000			MOVLW	0
$00FB	$00F4			MOVWF	STACK_4
$00FC	$3000			MOVLW	0
$00FD	$00F5			MOVWF	STACK_4+1
$00FE	$3020			MOVLW	32
$00FF	$00F6			MOVWF	STACK_4+2
$0100	$3082			MOVLW	130
$0101	$00F7			MOVWF	STACK_4+3
$0102	$0841			MOVF	FloatToStr_un_L0, 0
$0103	$00F0			MOVWF	STACK_0
$0104	$0842			MOVF	FloatToStr_un_L0+1, 0
$0105	$00F1			MOVWF	STACK_0+1
$0106	$0843			MOVF	FloatToStr_un_L0+2, 0
$0107	$00F2			MOVWF	STACK_0+2
$0108	$0844			MOVF	FloatToStr_un_L0+3, 0
$0109	$00F3			MOVWF	STACK_0+3
$010A	$158A			BSF	PCLATH, 3
$010B	$22F3			CALL	_compare_double
$010C	$118A			BCF	PCLATH, 3
$010D	$3001			MOVLW	1
$010E	$1C03			BTFSS	STATUS, C
$010F	$3000			MOVLW	0
$0110	$00F0			MOVWF	STACK_0
$0111	$0870			MOVF	STACK_0, 0
$0112	$1903			BTFSC	STATUS, Z
$0113	$2933			GOTO	L_FloatToStr_36
$0114	$1683			BSF	STATUS, RP0
$0115	$0841			MOVF	FloatToStr_un_L0, 0
$0116	$00F0			MOVWF	STACK_0
$0117	$0842			MOVF	FloatToStr_un_L0+1, 0
$0118	$00F1			MOVWF	STACK_0+1
$0119	$0843			MOVF	FloatToStr_un_L0+2, 0
$011A	$00F2			MOVWF	STACK_0+2
$011B	$0844			MOVF	FloatToStr_un_L0+3, 0
$011C	$00F3			MOVWF	STACK_0+3
$011D	$30CD			MOVLW	205
$011E	$00F4			MOVWF	STACK_4
$011F	$30CC			MOVLW	204
$0120	$00F5			MOVWF	STACK_4+1
$0121	$304C			MOVLW	76
$0122	$00F6			MOVWF	STACK_4+2
$0123	$307B			MOVLW	123
$0124	$00F7			MOVWF	STACK_4+3
$0125	$158A			BSF	PCLATH, 3
$0126	$218C			CALL	_mul_32x32_fp
$0127	$118A			BCF	PCLATH, 3
$0128	$0870			MOVF	STACK_0, 0
$0129	$1683			BSF	STATUS, RP0
$012A	$00C1			MOVWF	FloatToStr_un_L0
$012B	$0871			MOVF	STACK_0+1, 0
$012C	$00C2			MOVWF	FloatToStr_un_L0+1
$012D	$0872			MOVF	STACK_0+2, 0
$012E	$00C3			MOVWF	FloatToStr_un_L0+2
$012F	$0873			MOVF	STACK_0+3, 0
$0130	$00C4			MOVWF	FloatToStr_un_L0+3
$0131	$0AC0			INCF	FloatToStr_dexpon_L0, 1
$0132	$28F8			GOTO	L_FloatToStr_35
$0133	$	L_FloatToStr_36:
$0133	$1303			BCF	STATUS, RP1
$0134	$1683			BSF	STATUS, RP0
$0135	$30FF			MOVLW	255
$0136	$0541			ANDWF	FloatToStr_un_L0, 0
$0137	$00F5			MOVWF	STACK_5
$0138	$30FF			MOVLW	255
$0139	$0542			ANDWF	FloatToStr_un_L0+1, 0
$013A	$00F6			MOVWF	STACK_5+1
$013B	$307F			MOVLW	127
$013C	$0543			ANDWF	FloatToStr_un_L0+2, 0
$013D	$00F7			MOVWF	STACK_5+2
$013E	$3000			MOVLW	0
$013F	$0544			ANDWF	FloatToStr_un_L0+3, 0
$0140	$00F8			MOVWF	STACK_5+3
$0141	$0875			MOVF	STACK_5, 0
$0142	$00F0			MOVWF	STACK_0
$0143	$0876			MOVF	STACK_5+1, 0
$0144	$00F1			MOVWF	STACK_0+1
$0145	$0877			MOVF	STACK_5+2, 0
$0146	$00F2			MOVWF	STACK_0+2
$0147	$0878			MOVF	STACK_5+3, 0
$0148	$00F3			MOVWF	STACK_0+3
$0149	$0DF0			RLF	STACK_0, 1
$014A	$0DF1			RLF	STACK_0+1, 1
$014B	$0DF2			RLF	STACK_0+2, 1
$014C	$0DF3			RLF	STACK_0+3, 1
$014D	$1070			BCF	STACK_0, 0
$014E	$3000			MOVLW	0
$014F	$05C1			ANDWF	FloatToStr_un_L0, 1
$0150	$3000			MOVLW	0
$0151	$05C2			ANDWF	FloatToStr_un_L0+1, 1
$0152	$3000			MOVLW	0
$0153	$05C3			ANDWF	FloatToStr_un_L0+2, 1
$0154	$30FF			MOVLW	255
$0155	$05C4			ANDWF	FloatToStr_un_L0+3, 1
$0156	$0870			MOVF	STACK_0, 0
$0157	$04C1			IORWF	FloatToStr_un_L0, 1
$0158	$0871			MOVF	STACK_0+1, 0
$0159	$04C2			IORWF	FloatToStr_un_L0+1, 1
$015A	$0872			MOVF	STACK_0+2, 0
$015B	$04C3			IORWF	FloatToStr_un_L0+2, 1
$015C	$0873			MOVF	STACK_0+3, 0
$015D	$04C4			IORWF	FloatToStr_un_L0+3, 1
$015E	$307F			MOVLW	127
$015F	$0244			SUBWF	FloatToStr_un_L0+3, 0
$0160	$00F0			MOVWF	STACK_0
$0161	$0870			MOVF	STACK_0, 0
$0162	$00BF			MOVWF	FloatToStr_d_L0
$0163	$3001			MOVLW	1
$0164	$00C4			MOVWF	FloatToStr_un_L0+3
$0165	$0870			MOVF	STACK_0, 0
$0166	$	L_FloatToStr_63:
$0166	$1903			BTFSC	STATUS, Z
$0167	$296F			GOTO	L_FloatToStr_64
$0168	$0DC1			RLF	FloatToStr_un_L0, 1
$0169	$0DC2			RLF	FloatToStr_un_L0+1, 1
$016A	$0DC3			RLF	FloatToStr_un_L0+2, 1
$016B	$0DC4			RLF	FloatToStr_un_L0+3, 1
$016C	$1041			BCF	FloatToStr_un_L0, 0
$016D	$3FFF			ADDLW	255
$016E	$2966			GOTO	L_FloatToStr_63
$016F	$	L_FloatToStr_64:
$016F	$0844			MOVF	FloatToStr_un_L0+3, 0
$0170	$3F30			ADDLW	48
$0171	$00F0			MOVWF	STACK_0
$0172	$1283			BCF	STATUS, RP0
$0173	$086D			MOVF	FARG_FloatToStr+4, 0
$0174	$0084			MOVWF	FSR
$0175	$0870			MOVF	STACK_0, 0
$0176	$0080			MOVWF	INDF
$0177	$0AED			INCF	FARG_FloatToStr+4, 1
$0178	$3080			MOVLW	128
$0179	$1683			BSF	STATUS, RP0
$017A	$0640			XORWF	FloatToStr_dexpon_L0, 0
$017B	$00F0			MOVWF	STACK_0
$017C	$3080			MOVLW	128
$017D	$3A01			XORLW	1
$017E	$0270			SUBWF	STACK_0, 0
$017F	$1C03			BTFSS	STATUS, C
$0180	$2989			GOTO	L374_ex_L_FloatToStr_39
$0181	$3080			MOVLW	128
$0182	$3A06			XORLW	6
$0183	$00F0			MOVWF	STACK_0
$0184	$3080			MOVLW	128
$0185	$0640			XORWF	FloatToStr_dexpon_L0, 0
$0186	$0270			SUBWF	STACK_0, 0
$0187	$1803			BTFSC	STATUS, C
$0188	$2992			GOTO	L_FloatToStr_39
$0189	$	L374_ex_L_FloatToStr_39:
$0189	$1283			BCF	STATUS, RP0
$018A	$086D			MOVF	FARG_FloatToStr+4, 0
$018B	$0084			MOVWF	FSR
$018C	$302E			MOVLW	46
$018D	$0080			MOVWF	INDF
$018E	$0AED			INCF	FARG_FloatToStr+4, 1
$018F	$3001			MOVLW	1
$0190	$1683			BSF	STATUS, RP0
$0191	$00BD			MOVWF	FloatToStr_bpoint_L0
$0192	$	L_FloatToStr_39:
$0192	$3006			MOVLW	6
$0193	$00BF			MOVWF	FloatToStr_d_L0
$0194	$	L_FloatToStr_40:
$0194	$083F			MOVF	FloatToStr_d_L0, 0
$0195	$3A00			XORLW	0
$0196	$1903			BTFSC	STATUS, Z
$0197	$29DC			GOTO	L_FloatToStr_41
$0198	$01C4			CLRF	FloatToStr_un_L0+3, 1
$0199	$0841			MOVF	FloatToStr_un_L0, 0
$019A	$00F0			MOVWF	STACK_0
$019B	$0842			MOVF	FloatToStr_un_L0+1, 0
$019C	$00F1			MOVWF	STACK_0+1
$019D	$0843			MOVF	FloatToStr_un_L0+2, 0
$019E	$00F2			MOVWF	STACK_0+2
$019F	$0844			MOVF	FloatToStr_un_L0+3, 0
$01A0	$00F3			MOVWF	STACK_0+3
$01A1	$0DF0			RLF	STACK_0, 1
$01A2	$0DF1			RLF	STACK_0+1, 1
$01A3	$0DF2			RLF	STACK_0+2, 1
$01A4	$0DF3			RLF	STACK_0+3, 1
$01A5	$1070			BCF	STACK_0, 0
$01A6	$0DF0			RLF	STACK_0, 1
$01A7	$0DF1			RLF	STACK_0+1, 1
$01A8	$0DF2			RLF	STACK_0+2, 1
$01A9	$0DF3			RLF	STACK_0+3, 1
$01AA	$1070			BCF	STACK_0, 0
$01AB	$0870			MOVF	STACK_0, 0
$01AC	$07C1			ADDWF	FloatToStr_un_L0, 1
$01AD	$0871			MOVF	STACK_0+1, 0
$01AE	$1803			BTFSC	STATUS, C
$01AF	$0F71			INCFSZ	STACK_0+1, 0
$01B0	$07C2			ADDWF	FloatToStr_un_L0+1, 1
$01B1	$0872			MOVF	STACK_0+2, 0
$01B2	$1803			BTFSC	STATUS, C
$01B3	$0F72			INCFSZ	STACK_0+2, 0
$01B4	$07C3			ADDWF	FloatToStr_un_L0+2, 1
$01B5	$0873			MOVF	STACK_0+3, 0
$01B6	$1803			BTFSC	STATUS, C
$01B7	$0F73			INCFSZ	STACK_0+3, 0
$01B8	$07C4			ADDWF	FloatToStr_un_L0+3, 1
$01B9	$0DC1			RLF	FloatToStr_un_L0, 1
$01BA	$0DC2			RLF	FloatToStr_un_L0+1, 1
$01BB	$0DC3			RLF	FloatToStr_un_L0+2, 1
$01BC	$0DC4			RLF	FloatToStr_un_L0+3, 1
$01BD	$1041			BCF	FloatToStr_un_L0, 0
$01BE	$0844			MOVF	FloatToStr_un_L0+3, 0
$01BF	$3F30			ADDLW	48
$01C0	$00F0			MOVWF	STACK_0
$01C1	$1283			BCF	STATUS, RP0
$01C2	$086D			MOVF	FARG_FloatToStr+4, 0
$01C3	$0084			MOVWF	FSR
$01C4	$0870			MOVF	STACK_0, 0
$01C5	$0080			MOVWF	INDF
$01C6	$0AED			INCF	FARG_FloatToStr+4, 1
$01C7	$1683			BSF	STATUS, RP0
$01C8	$083D			MOVF	FloatToStr_bpoint_L0, 0
$01C9	$3A00			XORLW	0
$01CA	$1D03			BTFSS	STATUS, Z
$01CB	$29DA			GOTO	L_FloatToStr_43
$01CC	$03C0			DECF	FloatToStr_dexpon_L0, 1
$01CD	$0840			MOVF	FloatToStr_dexpon_L0, 0
$01CE	$3A00			XORLW	0
$01CF	$1D03			BTFSS	STATUS, Z
$01D0	$29DA			GOTO	L_FloatToStr_44
$01D1	$1283			BCF	STATUS, RP0
$01D2	$086D			MOVF	FARG_FloatToStr+4, 0
$01D3	$0084			MOVWF	FSR
$01D4	$302E			MOVLW	46
$01D5	$0080			MOVWF	INDF
$01D6	$0AED			INCF	FARG_FloatToStr+4, 1
$01D7	$3001			MOVLW	1
$01D8	$1683			BSF	STATUS, RP0
$01D9	$00BD			MOVWF	FloatToStr_bpoint_L0
$01DA	$	L_FloatToStr_44:
$01DA	$	L_FloatToStr_43:
$01DA	$	L_FloatToStr_42:
$01DA	$03BF			DECF	FloatToStr_d_L0, 1
$01DB	$2994			GOTO	L_FloatToStr_40
$01DC	$	L_FloatToStr_41:
$01DC	$	L_FloatToStr_45:
$01DC	$30FF			MOVLW	255
$01DD	$1283			BCF	STATUS, RP0
$01DE	$076D			ADDWF	FARG_FloatToStr+4, 0
$01DF	$0084			MOVWF	FSR
$01E0	$0800			MOVF	INDF, 0
$01E1	$00F4			MOVWF	STACK_4
$01E2	$0874			MOVF	STACK_4, 0
$01E3	$3A30			XORLW	48
$01E4	$1D03			BTFSS	STATUS, Z
$01E5	$29E8			GOTO	L_FloatToStr_46
$01E6	$03ED			DECF	FARG_FloatToStr+4, 1
$01E7	$29DC			GOTO	L_FloatToStr_45
$01E8	$	L_FloatToStr_46:
$01E8	$30FF			MOVLW	255
$01E9	$076D			ADDWF	FARG_FloatToStr+4, 0
$01EA	$0084			MOVWF	FSR
$01EB	$0800			MOVF	INDF, 0
$01EC	$00F4			MOVWF	STACK_4
$01ED	$0874			MOVF	STACK_4, 0
$01EE	$3A2E			XORLW	46
$01EF	$1D03			BTFSS	STATUS, Z
$01F0	$29F2			GOTO	L_FloatToStr_47
$01F1	$03ED			DECF	FARG_FloatToStr+4, 1
$01F2	$	L_FloatToStr_47:
$01F2	$1683			BSF	STATUS, RP0
$01F3	$0840			MOVF	FloatToStr_dexpon_L0, 0
$01F4	$3A00			XORLW	0
$01F5	$1903			BTFSC	STATUS, Z
$01F6	$2A35			GOTO	L_FloatToStr_48
$01F7	$1283			BCF	STATUS, RP0
$01F8	$086D			MOVF	FARG_FloatToStr+4, 0
$01F9	$0084			MOVWF	FSR
$01FA	$3065			MOVLW	101
$01FB	$0080			MOVWF	INDF
$01FC	$0AED			INCF	FARG_FloatToStr+4, 1
$01FD	$3080			MOVLW	128
$01FE	$1683			BSF	STATUS, RP0
$01FF	$0640			XORWF	FloatToStr_dexpon_L0, 0
$0200	$00F0			MOVWF	STACK_0
$0201	$3080			MOVLW	128
$0202	$3A00			XORLW	0
$0203	$0270			SUBWF	STACK_0, 0
$0204	$1803			BTFSC	STATUS, C
$0205	$2A10			GOTO	L_FloatToStr_49
$0206	$1283			BCF	STATUS, RP0
$0207	$086D			MOVF	FARG_FloatToStr+4, 0
$0208	$0084			MOVWF	FSR
$0209	$302D			MOVLW	45
$020A	$0080			MOVWF	INDF
$020B	$0AED			INCF	FARG_FloatToStr+4, 1
$020C	$1683			BSF	STATUS, RP0
$020D	$0840			MOVF	FloatToStr_dexpon_L0, 0
$020E	$3C00			SUBLW	0
$020F	$00C0			MOVWF	FloatToStr_dexpon_L0
$0210	$	L_FloatToStr_49:
$0210	$0840			MOVF	FloatToStr_dexpon_L0, 0
$0211	$00BF			MOVWF	FloatToStr_d_L0
$0212	$0840			MOVF	FloatToStr_dexpon_L0, 0
$0213	$3C09			SUBLW	9
$0214	$1803			BTFSC	STATUS, C
$0215	$2A24			GOTO	L_FloatToStr_50
$0216	$300A			MOVLW	10
$0217	$00F4			MOVWF	STACK_4
$0218	$083F			MOVF	FloatToStr_d_L0, 0
$0219	$00F0			MOVWF	STACK_0
$021A	$158A			BSF	PCLATH, 3
$021B	$251F			CALL	_div_8x8_u
$021C	$118A			BCF	PCLATH, 3
$021D	$3030			MOVLW	48
$021E	$07F0			ADDWF	STACK_0, 1
$021F	$086D			MOVF	FARG_FloatToStr+4, 0
$0220	$0084			MOVWF	FSR
$0221	$0870			MOVF	STACK_0, 0
$0222	$0080			MOVWF	INDF
$0223	$0AED			INCF	FARG_FloatToStr+4, 1
$0224	$	L_FloatToStr_50:
$0224	$300A			MOVLW	10
$0225	$00F4			MOVWF	STACK_4
$0226	$1683			BSF	STATUS, RP0
$0227	$083F			MOVF	FloatToStr_d_L0, 0
$0228	$00F0			MOVWF	STACK_0
$0229	$158A			BSF	PCLATH, 3
$022A	$251F			CALL	_div_8x8_u
$022B	$118A			BCF	PCLATH, 3
$022C	$0878			MOVF	STACK_8, 0
$022D	$00F0			MOVWF	STACK_0
$022E	$3030			MOVLW	48
$022F	$07F0			ADDWF	STACK_0, 1
$0230	$086D			MOVF	FARG_FloatToStr+4, 0
$0231	$0084			MOVWF	FSR
$0232	$0870			MOVF	STACK_0, 0
$0233	$0080			MOVWF	INDF
$0234	$0AED			INCF	FARG_FloatToStr+4, 1
$0235	$	L_FloatToStr_48:
$0235	$1303			BCF	STATUS, RP1
$0236	$1283			BCF	STATUS, RP0
$0237	$086D			MOVF	FARG_FloatToStr+4, 0
$0238	$0084			MOVWF	FSR
$0239	$0180			CLRF	INDF, 1
$023A	$01F0			CLRF	STACK_0, 1
$023B	$0008			RETURN
$0D36	$	table___err:
;multimeter.c,11 :: 		unsigned const char err[15]="Out of range";
$0D36	$344F			RETLW	79
$0D37	$3475			RETLW	117
$0D38	$3474			RETLW	116
$0D39	$3420			RETLW	32
$0D3A	$346F			RETLW	111
$0D3B	$3466			RETLW	102
$0D3C	$3420			RETLW	32
$0D3D	$3472			RETLW	114
$0D3E	$3461			RETLW	97
$0D3F	$346E			RETLW	110
$0D40	$3467			RETLW	103
$0D41	$3465			RETLW	101
$0D42	$3400			RETLW	0
$0D43	$3400			RETLW	0
$0D44	$3400			RETLW	0
$0D45	$0008			RETURN
$0C44	$	_Mul_16x16_U:
$0C44	$1303			BCF	STATUS, RP1
$0C45	$1283			BCF	STATUS, RP0
$0C46	$01FB			CLRF	STACK_11
$0C47	$01FA			CLRF	STACK_10
$0C48	$01F9			CLRF	STACK_9
$0C49	$3080			MOVLW	128
$0C4A	$00F8			MOVWF	STACK_8
$0C4B	$0CF1			RRF	STACK_1, F
$0C4C	$0CF0			RRF	STACK_0, F
$0C4D	$1C03			BTFSS	STATUS, C
$0C4E	$2C58			GOTO	$+10
$0C4F	$0874			MOVF	STACK_4, W
$0C50	$07F9			ADDWF	STACK_9, F
$0C51	$0875			MOVF	STACK_5, W
$0C52	$1803			BTFSC	STATUS, C
$0C53	$0F75			INCFSZ	STACK_5, W
$0C54	$07FA			ADDWF	STACK_10, F
$0C55	$1803			BTFSC	STATUS, C
$0C56	$0AFB			INCF	STACK_11, F
$0C57	$1003			BCF	STATUS, C
$0C58	$1FF0			BTFSS	STACK_0, 7
$0C59	$2C60			GOTO	$+7
$0C5A	$0874			MOVF	STACK_4, W
$0C5B	$07FA			ADDWF	STACK_10, F
$0C5C	$0875			MOVF	STACK_5, W
$0C5D	$1803			BTFSC	STATUS, C
$0C5E	$0F75			INCFSZ	STACK_5, W
$0C5F	$07FB			ADDWF	STACK_11, F
$0C60	$0CFB			RRF	STACK_11, F
$0C61	$0CFA			RRF	STACK_10, F
$0C62	$0CF9			RRF	STACK_9, F
$0C63	$0CF8			RRF	STACK_8, F
$0C64	$1C03			BTFSS	STATUS, C
$0C65	$2C4B			GOTO	$-26
$0C66	$087B			MOVF	STACK_11, W
$0C67	$00F3			MOVWF	STACK_3
$0C68	$087A			MOVF	STACK_10, W
$0C69	$00F2			MOVWF	STACK_2
$0C6A	$0879			MOVF	STACK_9, W
$0C6B	$00F1			MOVWF	STACK_1
$0C6C	$0878			MOVF	STACK_8, W
$0C6D	$00F0			MOVWF	STACK_0
$0C6E	$0008			RETURN
$0CC0	$	_Word2Double:
$0CC0	$1303			BCF	STATUS, RP1
$0CC1	$1283			BCF	STATUS, RP0
$0CC2	$0870			MOVF	STACK_0, W
$0CC3	$00F8			MOVWF	STACK_8
$0CC4	$0871			MOVF	STACK_1, W
$0CC5	$00F0			MOVWF	STACK_0
$0CC6	$01F1			CLRF	STACK_1
$0CC7	$01F2			CLRF	STACK_2
$0CC8	$01F3			CLRF	STACK_3
$0CC9	$	FLO16U32:
$0CC9	$01FB			CLRF	STACK_11
$0CCA	$01FC			CLRF	STACK_12
$0CCB	$3096			MOVLW	150
$0CCC	$00F3			MOVWF	STACK_3
$0CCD	$01FA			CLRF	STACK_10
$0CCE	$0870			MOVF	STACK_0, W
$0CCF	$00F1			MOVWF	STACK_1
$0CD0	$0878			MOVF	STACK_8, W
$0CD1	$00F0			MOVWF	STACK_0
$0CD2	$01F8			CLRF	STACK_8
$0CD3	$01F2			CLRF	STACK_2
$0CD4	$2343			CALL	_NRM3232
$0CD5	$0008			RETURN
$08A2	$	_Div_32x32_FP:
$08A2	$1303			BCF	STATUS, RP1
$08A3	$1283			BCF	STATUS, RP0
$08A4	$	FPD32:
$08A4	$0877			MOVF	STACK_7, W
$08A5	$1903			BTFSC	STATUS, Z
$08A6	$2931			GOTO	JPDSETFDZ32
$08A7	$0873			MOVF	STACK_3, W
$08A8	$1903			BTFSC	STATUS, Z
$08A9	$2934			GOTO	JPDRES032
$08AA	$	D32BNE0:
$08AA	$0872			MOVF	STACK_2, W
$08AB	$0676			XORWF	STACK_6, W
$08AC	$3980			ANDLW	128
$08AD	$00FA			MOVWF	STACK_10
$08AE	$17F2			BSF	STACK_2, 7
$08AF	$17F6			BSF	STACK_6, 7
$08B0	$	TALIGN32:
$08B0	$01A0			CLRF	__math_tempbD
$08B1	$0872			MOVF	STACK_2, W
$08B2	$00F8			MOVWF	STACK_8
$08B3	$0871			MOVF	STACK_1, W
$08B4	$00FC			MOVWF	STACK_12
$08B5	$0870			MOVF	STACK_0, W
$08B6	$00FD			MOVWF	STACK_13
$08B7	$0874			MOVF	STACK_4, W
$08B8	$02FD			SUBWF	STACK_13, F
$08B9	$0875			MOVF	STACK_5, W
$08BA	$1C03			BTFSS	STATUS, C
$08BB	$0F75			INCFSZ	STACK_5, W
$08BC	$	TS1ALIGN32:
$08BC	$02FC			SUBWF	STACK_12, F
$08BD	$0876			MOVF	STACK_6, W
$08BE	$1C03			BTFSS	STATUS, C
$08BF	$0F76			INCFSZ	STACK_6, W
$08C0	$	TS2ALIGN32:
$08C0	$02F8			SUBWF	STACK_8, F
$08C1	$01F8			CLRF	STACK_8
$08C2	$01FC			CLRF	STACK_12
$08C3	$01FD			CLRF	STACK_13
$08C4	$1C03			BTFSS	STATUS, C
$08C5	$28CD			GOTO	DALIGN32OK
$08C6	$1003			BCF	STATUS, C
$08C7	$0CF2			RRF	STACK_2, F
$08C8	$0CF1			RRF	STACK_1, F
$08C9	$0CF0			RRF	STACK_0, F
$08CA	$0CF8			RRF	STACK_8, F
$08CB	$3001			MOVLW	0x01
$08CC	$00A0			MOVWF	__math_tempbD
$08CD	$	DALIGN32OK:
$08CD	$0877			MOVF	STACK_7, W
$08CE	$02F3			SUBWF	STACK_3, F
$08CF	$1C03			BTFSS	STATUS, C
$08D0	$28D7			GOTO	ALTB32
$08D1	$	AGEB32:
$08D1	$307E			MOVLW	126
$08D2	$0720			ADDWF	__math_tempbD, W
$08D3	$07F3			ADDWF	STACK_3, F
$08D4	$1803			BTFSC	STATUS, C
$08D5	$2937			GOTO	JPDSETFOV32
$08D6	$28DC			GOTO	DARGOK32
$08D7	$	ALTB32:
$08D7	$307E			MOVLW	126
$08D8	$0720			ADDWF	__math_tempbD, W
$08D9	$07F3			ADDWF	STACK_3, F
$08DA	$1C03			BTFSS	STATUS, C
$08DB	$293C			GOTO	JPDSETFUN32
$08DC	$	DARGOK32:
$08DC	$3018			MOVLW	24
$08DD	$07FA			ADDWF	STACK_10, F
$08DE	$	DLOOP32:
$08DE	$0DFD			RLF	STACK_13, F
$08DF	$0DFC			RLF	STACK_12, F
$08E0	$0DF8			RLF	STACK_8, F
$08E1	$0DF0			RLF	STACK_0, F
$08E2	$0DF1			RLF	STACK_1, F
$08E3	$0DF2			RLF	STACK_2, F
$08E4	$0DA0			RLF	__math_tempbD, F
$08E5	$0874			MOVF	STACK_4, W
$08E6	$02F0			SUBWF	STACK_0, F
$08E7	$0875			MOVF	STACK_5, W
$08E8	$1C03			BTFSS	STATUS, C
$08E9	$0F75			INCFSZ	STACK_5, W
$08EA	$	DS132:
$08EA	$02F1			SUBWF	STACK_1, F
$08EB	$0876			MOVF	STACK_6, W
$08EC	$1C03			BTFSS	STATUS, C
$08ED	$0F76			INCFSZ	STACK_6, W
$08EE	$	DS232:
$08EE	$02F2			SUBWF	STACK_2, F
$08EF	$0D76			RLF	STACK_6, W
$08F0	$04A0			IORWF	__math_tempbD, F
$08F1	$1C20			BTFSS	__math_tempbD, 0
$08F2	$28F5			GOTO	DREST32
$08F3	$147D			BSF	STACK_13, 0
$08F4	$2900			GOTO	DOK32
$08F5	$	DREST32:
$08F5	$0874			MOVF	STACK_4, W
$08F6	$07F0			ADDWF	STACK_0, F
$08F7	$0875			MOVF	STACK_5, W
$08F8	$1803			BTFSC	STATUS, C
$08F9	$0F75			INCFSZ	STACK_5, W
$08FA	$	DAREST32:
$08FA	$07F1			ADDWF	STACK_1, F
$08FB	$0876			MOVF	STACK_6, W
$08FC	$1803			BTFSC	STATUS, C
$08FD	$0A76			INCF	STACK_6, W
$08FE	$07F2			ADDWF	STACK_2, F
$08FF	$107D			BCF	STACK_13, 0
$0900	$	DOK32:
$0900	$03FA			DECF	STACK_10, F
$0901	$301F			MOVLW	31
$0902	$057A			ANDWF	STACK_10, W
$0903	$1D03			BTFSS	STATUS, Z
$0904	$28DE			GOTO	DLOOP32
$0905	$	DROUND32:
$0905	$1B7B			BTFSC	STACK_11, 6
$0906	$1C7D			BTFSS	STACK_13, 0
$0907	$2927			GOTO	DIV32OK
$0908	$1003			BCF	STATUS, C
$0909	$0DF0			RLF	STACK_0, F
$090A	$0DF1			RLF	STACK_1, F
$090B	$0DF2			RLF	STACK_2, F
$090C	$0DA0			RLF	__math_tempbD, F
$090D	$0874			MOVF	STACK_4, W
$090E	$02F0			SUBWF	STACK_0, F
$090F	$0875			MOVF	STACK_5, W
$0910	$1C03			BTFSS	STATUS, C
$0911	$0F75			INCFSZ	STACK_5, W
$0912	$02F1			SUBWF	STACK_1, F
$0913	$0876			MOVF	STACK_6, W
$0914	$1C03			BTFSS	STATUS, C
$0915	$0F76			INCFSZ	STACK_6, W
$0916	$02F2			SUBWF	STACK_2, F
$0917	$0D76			RLF	STACK_6, W
$0918	$0420			IORWF	__math_tempbD, W
$0919	$3901			ANDLW	0x01
$091A	$07FD			ADDWF	STACK_13, F
$091B	$1803			BTFSC	STATUS, C
$091C	$0AFC			INCF	STACK_12, F
$091D	$1903			BTFSC	STATUS, Z
$091E	$0AF8			INCF	STACK_8, F
$091F	$1D03			BTFSS	STATUS, Z
$0920	$2927			GOTO	DIV32OK
$0921	$0CF8			RRF	STACK_8, F
$0922	$0CFC			RRF	STACK_12, F
$0923	$0CFD			RRF	STACK_13, F
$0924	$0AF3			INCF	STACK_3, F
$0925	$1903			BTFSC	STATUS, Z
$0926	$2937			GOTO	JPDSETFOV32
$0927	$	DIV32OK:
$0927	$1FFA			BTFSS	STACK_10, 7
$0928	$13F8			BCF	STACK_8, 7
$0929	$0878			MOVF	STACK_8, W
$092A	$00F2			MOVWF	STACK_2
$092B	$087C			MOVF	STACK_12, W
$092C	$00F1			MOVWF	STACK_1
$092D	$087D			MOVF	STACK_13, W
$092E	$00F0			MOVWF	STACK_0
$092F	$3000			MOVLW	0x00
$0930	$293E			GOTO	DIV32EEE
$0931	$	JPDSETFDZ32:
$0931	$3001			MOVLW	0x01
$0932	$25A6			CALL	_SETFDZ32
$0933	$293E			GOTO	DIV32EEE
$0934	$	JPDRES032:
$0934	$3002			MOVLW	0x02
$0935	$2573			CALL	_RES032
$0936	$293E			GOTO	DIV32EEE
$0937	$	JPDSETFOV32:
$0937	$3004			MOVLW	0x04
$0938	$118A			BCF	PCLATH, 3
$0939	$2705			CALL	_SETFOV32
$093A	$158A			BSF	PCLATH, 3
$093B	$293E			GOTO	DIV32EEE
$093C	$	JPDSETFUN32:
$093C	$3008			MOVLW	0x08
$093D	$255F			CALL	_SETFUN32
$093E	$	DIV32EEE:
$093E	$0000			NOP
$093F	$0008			RETURN
$0CD6	$	_Longword2Double:
$0CD6	$1303			BCF	STATUS, RP1
$0CD7	$1283			BCF	STATUS, RP0
$0CD8	$0870			MOVF	STACK_0, W
$0CD9	$00F8			MOVWF	STACK_8
$0CDA	$0871			MOVF	STACK_1, W
$0CDB	$00F0			MOVWF	STACK_0
$0CDC	$0872			MOVF	STACK_2, W
$0CDD	$00F1			MOVWF	STACK_1
$0CDE	$0873			MOVF	STACK_3, W
$0CDF	$00F2			MOVWF	STACK_2
$0CE0	$01F3			CLRF	STACK_3
$0CE1	$	FLO32U32:
$0CE1	$01FB			CLRF	STACK_11
$0CE2	$01FC			CLRF	STACK_12
$0CE3	$309E			MOVLW	0x9E
$0CE4	$00F3			MOVWF	STACK_3
$0CE5	$01FA			CLRF	STACK_10
$0CE6	$3002			MOVLW	0x02
$0CE7	$00FC			MOVWF	STACK_12
$0CE8	$2253			CALL	_NRM4032
$0CE9	$0008			RETURN
$0CFE	$	_Byte2Double:
$0CFE	$1303			BCF	STATUS, RP1
$0CFF	$1283			BCF	STATUS, RP0
$0D00	$	FLO08U32:
$0D00	$0870			MOVF	STACK_0, W
$0D01	$00F8			MOVWF	STACK_8
$0D02	$01FB			CLRF	STACK_11
$0D03	$01FC			CLRF	STACK_12
$0D04	$309E			MOVLW	0x9E
$0D05	$00F3			MOVWF	STACK_3
$0D06	$01FA			CLRF	STACK_10
$0D07	$01F2			CLRF	STACK_2
$0D08	$01F1			CLRF	STACK_1
$0D09	$01F0			CLRF	STACK_0
$0D0A	$3002			MOVLW	0x02
$0D0B	$00FC			MOVWF	STACK_12
$0D0C	$2253			CALL	_NRM4032
$0D0D	$0008			RETURN
$0D6D	$	_Sub_32x32_FP:
$0D6D	$1303			BCF	STATUS, RP1
$0D6E	$1283			BCF	STATUS, RP0
$0D6F	$3080			MOVLW	0x80
$0D70	$06F6			XORWF	STACK_6, F
$0D71	$2000			CALL	_Add_32x32_FP
$0D72	$0008			RETURN
$04D7	$	_volt_meter:
$04D7	$3020			MOVLW	32
$04D8	$1303			BCF	STATUS, RP1
$04D9	$1283			BCF	STATUS, RP0
$04DA	$00DE			MOVWF	lstr1_multimeter+0
$04DB	$3056			MOVLW	86
$04DC	$00DF			MOVWF	lstr1_multimeter+1
$04DD	$01E0			CLRF	lstr1_multimeter+2
$04DE	$302C			MOVLW	44
$04DF	$00E1			MOVWF	lstr2_multimeter+0
$04E0	$3052			MOVLW	82
$04E1	$00E2			MOVWF	lstr2_multimeter+1
$04E2	$01E3			CLRF	lstr2_multimeter+2
;multimeter.c,45 :: 		void volt_meter(){
;multimeter.c,46 :: 		unsigned char range=1;
$04E3	$3001			MOVLW	1
$04E4	$00E4			MOVWF	volt_meter_range_L0
;multimeter.c,47 :: 		unsigned char mult=1.0;
$04E5	$3001			MOVLW	1
$04E6	$00E5			MOVWF	volt_meter_mult_L0
;multimeter.c,48 :: 		while (PORTC.F1==0){
$04E7	$	L_volt_meter_3:
$04E7	$3000			MOVLW	0
$04E8	$1887			BTFSC	PORTC, 1
$04E9	$3001			MOVLW	1
$04EA	$00F4			MOVWF	STACK_4
$04EB	$0874			MOVF	STACK_4, 0
$04EC	$3A00			XORLW	0
$04ED	$1D03			BTFSS	STATUS, Z
$04EE	$2DC1			GOTO	L_volt_meter_4
;multimeter.c,49 :: 		if (PORTC.F0==1){
$04EF	$3001			MOVLW	1
$04F0	$0507			ANDWF	PORTC, 0
$04F1	$00F4			MOVWF	STACK_4
$04F2	$0874			MOVF	STACK_4, 0
$04F3	$3A01			XORLW	1
$04F4	$1D03			BTFSS	STATUS, Z
$04F5	$2CF9			GOTO	L_volt_meter_5
;multimeter.c,50 :: 		range=1-range;
$04F6	$0864			MOVF	volt_meter_range_L0, 0
$04F7	$3C01			SUBLW	1
$04F8	$00E4			MOVWF	volt_meter_range_L0
;multimeter.c,51 :: 		}
$04F9	$	L_volt_meter_5:
;multimeter.c,52 :: 		switch (range){
$04F9	$2D02			GOTO	L_volt_meter_6
;multimeter.c,53 :: 		case 0:PORTB.F1=1;mult=1.0;break;
$04FA	$	L_volt_meter_8:
$04FA	$1486			BSF	PORTB, 1
$04FB	$3001			MOVLW	1
$04FC	$00E5			MOVWF	volt_meter_mult_L0
$04FD	$2D0A			GOTO	L_volt_meter_7
;multimeter.c,54 :: 		case 1:PORTB.F1=0;mult=4.0;break;
$04FE	$	L_volt_meter_9:
$04FE	$1086			BCF	PORTB, 1
$04FF	$3004			MOVLW	4
$0500	$00E5			MOVWF	volt_meter_mult_L0
$0501	$2D0A			GOTO	L_volt_meter_7
;multimeter.c,55 :: 		}
$0502	$	L_volt_meter_6:
$0502	$0864			MOVF	volt_meter_range_L0, 0
$0503	$3A00			XORLW	0
$0504	$1903			BTFSC	STATUS, Z
$0505	$2CFA			GOTO	L_volt_meter_8
$0506	$0864			MOVF	volt_meter_range_L0, 0
$0507	$3A01			XORLW	1
$0508	$1903			BTFSC	STATUS, Z
$0509	$2CFE			GOTO	L_volt_meter_9
$050A	$	L_volt_meter_7:
;multimeter.c,56 :: 		Lcd_Cmd(LCD_CLEAR);
$050A	$3001			MOVLW	1
$050B	$1683			BSF	STATUS, RP0
$050C	$00C6			MOVWF	FARG_Lcd_Cmd+0
$050D	$158A			BSF	PCLATH, 3
$050E	$22B1			CALL	_Lcd_Cmd
$050F	$118A			BCF	PCLATH, 3
;multimeter.c,57 :: 		Lcd_Cmd(LCD_FIRST_ROW);
$0510	$3080			MOVLW	128
$0511	$1683			BSF	STATUS, RP0
$0512	$00C6			MOVWF	FARG_Lcd_Cmd+0
$0513	$158A			BSF	PCLATH, 3
$0514	$22B1			CALL	_Lcd_Cmd
$0515	$118A			BCF	PCLATH, 3
;multimeter.c,58 :: 		Lcd_out_cp(codetxt_to_ramtxt(menu[index]));
$0516	$0831			MOVF	_index, 0
$0517	$00F0			MOVWF	STACK_0
$0518	$01F1			CLRF	STACK_0+1
$0519	$300C			MOVLW	12
$051A	$00F4			MOVWF	STACK_4
$051B	$3000			MOVLW	0
$051C	$00F5			MOVWF	STACK_4+1
$051D	$158A			BSF	PCLATH, 3
$051E	$2444			CALL	_mul_16x16_u
$051F	$118A			BCF	PCLATH, 3
$0520	$0870			MOVF	STACK_0, 0
$0521	$3FEC			ADDLW	#_menu
$0522	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$0523	$300B			MOVLW	@#_menu
$0524	$1803			BTFSC	STATUS, C
$0525	$3F01			ADDLW	1
$0526	$0771			ADDWF	STACK_0+1, 0
$0527	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$0528	$158A			BSF	PCLATH, 3
$0529	$241D			CALL	_codetxt_to_ramtxt
$052A	$118A			BCF	PCLATH, 3
$052B	$0870			MOVF	STACK_0, 0
$052C	$00E9			MOVWF	FARG_LCD_Out_CP+0
$052D	$158A			BSF	PCLATH, 3
$052E	$24EA			CALL	_LCD_Out_CP
$052F	$118A			BCF	PCLATH, 3
;multimeter.c,59 :: 		Lcd_out_cp(codetxt_to_ramtxt(msg1));
$0530	$308B			MOVLW	#_msg1
$0531	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$0532	$300D			MOVLW	@#_msg1
$0533	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$0534	$158A			BSF	PCLATH, 3
$0535	$241D			CALL	_codetxt_to_ramtxt
$0536	$118A			BCF	PCLATH, 3
$0537	$0870			MOVF	STACK_0, 0
$0538	$00E9			MOVWF	FARG_LCD_Out_CP+0
$0539	$158A			BSF	PCLATH, 3
$053A	$24EA			CALL	_LCD_Out_CP
$053B	$118A			BCF	PCLATH, 3
;multimeter.c,60 :: 		Lcd_Cmd(LCD_SECOND_ROW);
$053C	$30C0			MOVLW	192
$053D	$1683			BSF	STATUS, RP0
$053E	$00C6			MOVWF	FARG_Lcd_Cmd+0
$053F	$158A			BSF	PCLATH, 3
$0540	$22B1			CALL	_Lcd_Cmd
$0541	$118A			BCF	PCLATH, 3
;multimeter.c,61 :: 		get_volt_value(0,1);
$0542	$01E9			CLRF	FARG_get_volt_value+0, 1
$0543	$3001			MOVLW	1
$0544	$00EA			MOVWF	FARG_get_volt_value+1
$0545	$158A			BSF	PCLATH, 3
$0546	$2487			CALL	_get_volt_value
$0547	$118A			BCF	PCLATH, 3
;multimeter.c,62 :: 		if (adc_value<1017){                              // the maximum voltage we get on ADC pin is less than 5 volt because of voltage drop over cd4066
$0548	$3003			MOVLW	3
$0549	$0230			SUBWF	_adc_value+1, 0
$054A	$1D03			BTFSS	STATUS, Z
$054B	$2D4E			GOTO	L_volt_meter_44
$054C	$30F9			MOVLW	249
$054D	$022F			SUBWF	_adc_value, 0
$054E	$	L_volt_meter_44:
$054E	$1803			BTFSC	STATUS, C
$054F	$2D96			GOTO	L_volt_meter_10
;multimeter.c,64 :: 		FloatToStr(((mult*adc_value*5.0)/1024.0),str);
$0550	$0865			MOVF	volt_meter_mult_L0, 0
$0551	$00F0			MOVWF	STACK_0
$0552	$01F1			CLRF	STACK_0+1
$0553	$082F			MOVF	_adc_value, 0
$0554	$00F4			MOVWF	STACK_4
$0555	$0830			MOVF	_adc_value+1, 0
$0556	$00F5			MOVWF	STACK_4+1
$0557	$158A			BSF	PCLATH, 3
$0558	$2444			CALL	_mul_16x16_u
$0559	$118A			BCF	PCLATH, 3
$055A	$158A			BSF	PCLATH, 3
$055B	$24C0			CALL	_word2double
$055C	$118A			BCF	PCLATH, 3
$055D	$3000			MOVLW	0
$055E	$00F4			MOVWF	STACK_4
$055F	$3000			MOVLW	0
$0560	$00F5			MOVWF	STACK_4+1
$0561	$3020			MOVLW	32
$0562	$00F6			MOVWF	STACK_4+2
$0563	$3081			MOVLW	129
$0564	$00F7			MOVWF	STACK_4+3
$0565	$158A			BSF	PCLATH, 3
$0566	$218C			CALL	_mul_32x32_fp
$0567	$118A			BCF	PCLATH, 3
$0568	$3000			MOVLW	0
$0569	$00F4			MOVWF	STACK_4
$056A	$3000			MOVLW	0
$056B	$00F5			MOVWF	STACK_4+1
$056C	$3000			MOVLW	0
$056D	$00F6			MOVWF	STACK_4+2
$056E	$3089			MOVLW	137
$056F	$00F7			MOVWF	STACK_4+3
$0570	$158A			BSF	PCLATH, 3
$0571	$20A2			CALL	_div_32x32_fp
$0572	$118A			BCF	PCLATH, 3
$0573	$0870			MOVF	STACK_0, 0
$0574	$00E9			MOVWF	FARG_FloatToStr+0
$0575	$0871			MOVF	STACK_0+1, 0
$0576	$00EA			MOVWF	FARG_FloatToStr+1
$0577	$0872			MOVF	STACK_0+2, 0
$0578	$00EB			MOVWF	FARG_FloatToStr+2
$0579	$0873			MOVF	STACK_0+3, 0
$057A	$00EC			MOVWF	FARG_FloatToStr+3
$057B	$3032			MOVLW	_str
$057C	$00ED			MOVWF	FARG_FloatToStr+4
$057D	$2038			CALL	_FloatToStr
;multimeter.c,65 :: 		Lcd_out_cp(str);
$057E	$3032			MOVLW	_str
$057F	$1303			BCF	STATUS, RP1
$0580	$1283			BCF	STATUS, RP0
$0581	$00E9			MOVWF	FARG_LCD_Out_CP+0
$0582	$158A			BSF	PCLATH, 3
$0583	$24EA			CALL	_LCD_Out_CP
$0584	$118A			BCF	PCLATH, 3
;multimeter.c,66 :: 		Lcd_out_cp(" V");
$0585	$305E			MOVLW	lstr1_multimeter
$0586	$00E9			MOVWF	FARG_LCD_Out_CP+0
$0587	$158A			BSF	PCLATH, 3
$0588	$24EA			CALL	_LCD_Out_CP
$0589	$118A			BCF	PCLATH, 3
;multimeter.c,67 :: 		Lcd_out_cp(",R");
$058A	$3061			MOVLW	lstr2_multimeter
$058B	$00E9			MOVWF	FARG_LCD_Out_CP+0
$058C	$158A			BSF	PCLATH, 3
$058D	$24EA			CALL	_LCD_Out_CP
$058E	$118A			BCF	PCLATH, 3
;multimeter.c,68 :: 		Lcd_chr_cp(range+48);
$058F	$3030			MOVLW	48
$0590	$0764			ADDWF	volt_meter_range_L0, 0
$0591	$00EE			MOVWF	FARG_Lcd_Chr_CP+0
$0592	$158A			BSF	PCLATH, 3
$0593	$2555			CALL	_Lcd_Chr_CP
$0594	$118A			BCF	PCLATH, 3
;multimeter.c,69 :: 		}
$0595	$2DA2			GOTO	L_volt_meter_11
$0596	$	L_volt_meter_10:
;multimeter.c,71 :: 		Lcd_out_cp(codetxt_to_ramtxt(err));
$0596	$3036			MOVLW	#_err
$0597	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$0598	$300D			MOVLW	@#_err
$0599	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$059A	$158A			BSF	PCLATH, 3
$059B	$241D			CALL	_codetxt_to_ramtxt
$059C	$118A			BCF	PCLATH, 3
$059D	$0870			MOVF	STACK_0, 0
$059E	$00E9			MOVWF	FARG_LCD_Out_CP+0
$059F	$158A			BSF	PCLATH, 3
$05A0	$24EA			CALL	_LCD_Out_CP
$05A1	$118A			BCF	PCLATH, 3
;multimeter.c,72 :: 		}
$05A2	$	L_volt_meter_11:
;multimeter.c,73 :: 		delay_ms(200);
$05A2	$3002			MOVLW	2
$05A3	$00FC			MOVWF	STACK_12
$05A4	$30FF			MOVLW	255
$05A5	$00FB			MOVWF	STACK_11
$05A6	$30FF			MOVLW	255
$05A7	$00FA			MOVWF	STACK_10
$05A8	$0BFC			DECFSZ	STACK_12, F
$05A9	$2DAB			GOTO	$+2
$05AA	$2DB2			GOTO	$+8
$05AB	$0BFB			DECFSZ	STACK_11, F
$05AC	$2DAE			GOTO	$+2
$05AD	$2DB1			GOTO	$+4
$05AE	$0BFA			DECFSZ	STACK_10, F
$05AF	$2DAE			GOTO	$-1
$05B0	$2DAB			GOTO	$-5
$05B1	$2DA8			GOTO	$-9
$05B2	$3006			MOVLW	6
$05B3	$00FB			MOVWF	STACK_11
$05B4	$30FF			MOVLW	255
$05B5	$00FA			MOVWF	STACK_10
$05B6	$0BFB			DECFSZ	STACK_11, F
$05B7	$2DB9			GOTO	$+2
$05B8	$2DBC			GOTO	$+4
$05B9	$0BFA			DECFSZ	STACK_10, F
$05BA	$2DB9			GOTO	$-1
$05BB	$2DB6			GOTO	$-5
$05BC	$300A			MOVLW	10
$05BD	$00FA			MOVWF	STACK_10
$05BE	$0BFA			DECFSZ	STACK_10, F
$05BF	$2DBE			GOTO	$-1
;multimeter.c,74 :: 		}
$05C0	$2CE7			GOTO	L_volt_meter_3
$05C1	$	L_volt_meter_4:
;multimeter.c,75 :: 		}
$05C1	$0008			RETURN
$05C2	$	_amp_meter:
$05C2	$3020			MOVLW	32
$05C3	$1303			BCF	STATUS, RP1
$05C4	$1283			BCF	STATUS, RP0
$05C5	$00DE			MOVWF	lstr3_multimeter+0
$05C6	$3041			MOVLW	65
$05C7	$00DF			MOVWF	lstr3_multimeter+1
$05C8	$01E0			CLRF	lstr3_multimeter+2
;multimeter.c,77 :: 		void amp_meter(){
;multimeter.c,78 :: 		while (PORTC.F1==0){
$05C9	$	L_amp_meter_12:
$05C9	$3000			MOVLW	0
$05CA	$1887			BTFSC	PORTC, 1
$05CB	$3001			MOVLW	1
$05CC	$00F4			MOVWF	STACK_4
$05CD	$0874			MOVF	STACK_4, 0
$05CE	$3A00			XORLW	0
$05CF	$1D03			BTFSS	STATUS, Z
$05D0	$2E8E			GOTO	L_amp_meter_13
;multimeter.c,79 :: 		Lcd_Cmd(LCD_CLEAR);
$05D1	$3001			MOVLW	1
$05D2	$1683			BSF	STATUS, RP0
$05D3	$00C6			MOVWF	FARG_Lcd_Cmd+0
$05D4	$158A			BSF	PCLATH, 3
$05D5	$22B1			CALL	_Lcd_Cmd
$05D6	$118A			BCF	PCLATH, 3
;multimeter.c,80 :: 		Lcd_Cmd(LCD_FIRST_ROW);
$05D7	$3080			MOVLW	128
$05D8	$1683			BSF	STATUS, RP0
$05D9	$00C6			MOVWF	FARG_Lcd_Cmd+0
$05DA	$158A			BSF	PCLATH, 3
$05DB	$22B1			CALL	_Lcd_Cmd
$05DC	$118A			BCF	PCLATH, 3
;multimeter.c,81 :: 		Lcd_out_cp(codetxt_to_ramtxt(menu[index]));
$05DD	$0831			MOVF	_index, 0
$05DE	$00F0			MOVWF	STACK_0
$05DF	$01F1			CLRF	STACK_0+1
$05E0	$300C			MOVLW	12
$05E1	$00F4			MOVWF	STACK_4
$05E2	$3000			MOVLW	0
$05E3	$00F5			MOVWF	STACK_4+1
$05E4	$158A			BSF	PCLATH, 3
$05E5	$2444			CALL	_mul_16x16_u
$05E6	$118A			BCF	PCLATH, 3
$05E7	$0870			MOVF	STACK_0, 0
$05E8	$3FEC			ADDLW	#_menu
$05E9	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$05EA	$300B			MOVLW	@#_menu
$05EB	$1803			BTFSC	STATUS, C
$05EC	$3F01			ADDLW	1
$05ED	$0771			ADDWF	STACK_0+1, 0
$05EE	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$05EF	$158A			BSF	PCLATH, 3
$05F0	$241D			CALL	_codetxt_to_ramtxt
$05F1	$118A			BCF	PCLATH, 3
$05F2	$0870			MOVF	STACK_0, 0
$05F3	$00E9			MOVWF	FARG_LCD_Out_CP+0
$05F4	$158A			BSF	PCLATH, 3
$05F5	$24EA			CALL	_LCD_Out_CP
$05F6	$118A			BCF	PCLATH, 3
;multimeter.c,82 :: 		Lcd_out_cp(codetxt_to_ramtxt(msg1));
$05F7	$308B			MOVLW	#_msg1
$05F8	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$05F9	$300D			MOVLW	@#_msg1
$05FA	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$05FB	$158A			BSF	PCLATH, 3
$05FC	$241D			CALL	_codetxt_to_ramtxt
$05FD	$118A			BCF	PCLATH, 3
$05FE	$0870			MOVF	STACK_0, 0
$05FF	$00E9			MOVWF	FARG_LCD_Out_CP+0
$0600	$158A			BSF	PCLATH, 3
$0601	$24EA			CALL	_LCD_Out_CP
$0602	$118A			BCF	PCLATH, 3
;multimeter.c,83 :: 		Lcd_Cmd(LCD_SECOND_ROW);
$0603	$30C0			MOVLW	192
$0604	$1683			BSF	STATUS, RP0
$0605	$00C6			MOVWF	FARG_Lcd_Cmd+0
$0606	$158A			BSF	PCLATH, 3
$0607	$22B1			CALL	_Lcd_Cmd
$0608	$118A			BCF	PCLATH, 3
;multimeter.c,84 :: 		get_volt_value(5,4);
$0609	$3005			MOVLW	5
$060A	$00E9			MOVWF	FARG_get_volt_value+0
$060B	$3004			MOVLW	4
$060C	$00EA			MOVWF	FARG_get_volt_value+1
$060D	$158A			BSF	PCLATH, 3
$060E	$2487			CALL	_get_volt_value
$060F	$118A			BCF	PCLATH, 3
;multimeter.c,85 :: 		if (adc_value<1023){
$0610	$3003			MOVLW	3
$0611	$0230			SUBWF	_adc_value+1, 0
$0612	$1D03			BTFSS	STATUS, Z
$0613	$2E16			GOTO	L_amp_meter_45
$0614	$30FF			MOVLW	255
$0615	$022F			SUBWF	_adc_value, 0
$0616	$	L_amp_meter_45:
$0616	$1803			BTFSC	STATUS, C
$0617	$2E63			GOTO	L_amp_meter_14
;multimeter.c,86 :: 		FloatToStr(((4.0*adc_value*5.0)/1024.0)/5.0,str);
$0618	$082F			MOVF	_adc_value, 0
$0619	$00F0			MOVWF	STACK_0
$061A	$0830			MOVF	_adc_value+1, 0
$061B	$00F1			MOVWF	STACK_0+1
$061C	$158A			BSF	PCLATH, 3
$061D	$24C0			CALL	_word2double
$061E	$118A			BCF	PCLATH, 3
$061F	$3000			MOVLW	0
$0620	$00F4			MOVWF	STACK_4
$0621	$3000			MOVLW	0
$0622	$00F5			MOVWF	STACK_4+1
$0623	$3000			MOVLW	0
$0624	$00F6			MOVWF	STACK_4+2
$0625	$3081			MOVLW	129
$0626	$00F7			MOVWF	STACK_4+3
$0627	$158A			BSF	PCLATH, 3
$0628	$218C			CALL	_mul_32x32_fp
$0629	$118A			BCF	PCLATH, 3
$062A	$3000			MOVLW	0
$062B	$00F4			MOVWF	STACK_4
$062C	$3000			MOVLW	0
$062D	$00F5			MOVWF	STACK_4+1
$062E	$3020			MOVLW	32
$062F	$00F6			MOVWF	STACK_4+2
$0630	$3081			MOVLW	129
$0631	$00F7			MOVWF	STACK_4+3
$0632	$158A			BSF	PCLATH, 3
$0633	$218C			CALL	_mul_32x32_fp
$0634	$118A			BCF	PCLATH, 3
$0635	$3000			MOVLW	0
$0636	$00F4			MOVWF	STACK_4
$0637	$3000			MOVLW	0
$0638	$00F5			MOVWF	STACK_4+1
$0639	$3000			MOVLW	0
$063A	$00F6			MOVWF	STACK_4+2
$063B	$3089			MOVLW	137
$063C	$00F7			MOVWF	STACK_4+3
$063D	$158A			BSF	PCLATH, 3
$063E	$20A2			CALL	_div_32x32_fp
$063F	$118A			BCF	PCLATH, 3
$0640	$3000			MOVLW	0
$0641	$00F4			MOVWF	STACK_4
$0642	$3000			MOVLW	0
$0643	$00F5			MOVWF	STACK_4+1
$0644	$3020			MOVLW	32
$0645	$00F6			MOVWF	STACK_4+2
$0646	$3081			MOVLW	129
$0647	$00F7			MOVWF	STACK_4+3
$0648	$158A			BSF	PCLATH, 3
$0649	$20A2			CALL	_div_32x32_fp
$064A	$118A			BCF	PCLATH, 3
$064B	$0870			MOVF	STACK_0, 0
$064C	$00E9			MOVWF	FARG_FloatToStr+0
$064D	$0871			MOVF	STACK_0+1, 0
$064E	$00EA			MOVWF	FARG_FloatToStr+1
$064F	$0872			MOVF	STACK_0+2, 0
$0650	$00EB			MOVWF	FARG_FloatToStr+2
$0651	$0873			MOVF	STACK_0+3, 0
$0652	$00EC			MOVWF	FARG_FloatToStr+3
$0653	$3032			MOVLW	_str
$0654	$00ED			MOVWF	FARG_FloatToStr+4
$0655	$2038			CALL	_FloatToStr
;multimeter.c,87 :: 		Lcd_out_cp(str);
$0656	$3032			MOVLW	_str
$0657	$1303			BCF	STATUS, RP1
$0658	$1283			BCF	STATUS, RP0
$0659	$00E9			MOVWF	FARG_LCD_Out_CP+0
$065A	$158A			BSF	PCLATH, 3
$065B	$24EA			CALL	_LCD_Out_CP
$065C	$118A			BCF	PCLATH, 3
;multimeter.c,88 :: 		Lcd_out_cp(" A");
$065D	$305E			MOVLW	lstr3_multimeter
$065E	$00E9			MOVWF	FARG_LCD_Out_CP+0
$065F	$158A			BSF	PCLATH, 3
$0660	$24EA			CALL	_LCD_Out_CP
$0661	$118A			BCF	PCLATH, 3
;multimeter.c,89 :: 		}
$0662	$2E6F			GOTO	L_amp_meter_15
$0663	$	L_amp_meter_14:
;multimeter.c,91 :: 		Lcd_out_cp(codetxt_to_ramtxt(err));
$0663	$3036			MOVLW	#_err
$0664	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$0665	$300D			MOVLW	@#_err
$0666	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$0667	$158A			BSF	PCLATH, 3
$0668	$241D			CALL	_codetxt_to_ramtxt
$0669	$118A			BCF	PCLATH, 3
$066A	$0870			MOVF	STACK_0, 0
$066B	$00E9			MOVWF	FARG_LCD_Out_CP+0
$066C	$158A			BSF	PCLATH, 3
$066D	$24EA			CALL	_LCD_Out_CP
$066E	$118A			BCF	PCLATH, 3
;multimeter.c,92 :: 		}
$066F	$	L_amp_meter_15:
;multimeter.c,93 :: 		delay_ms(200);
$066F	$3002			MOVLW	2
$0670	$00FC			MOVWF	STACK_12
$0671	$30FF			MOVLW	255
$0672	$00FB			MOVWF	STACK_11
$0673	$30FF			MOVLW	255
$0674	$00FA			MOVWF	STACK_10
$0675	$0BFC			DECFSZ	STACK_12, F
$0676	$2E78			GOTO	$+2
$0677	$2E7F			GOTO	$+8
$0678	$0BFB			DECFSZ	STACK_11, F
$0679	$2E7B			GOTO	$+2
$067A	$2E7E			GOTO	$+4
$067B	$0BFA			DECFSZ	STACK_10, F
$067C	$2E7B			GOTO	$-1
$067D	$2E78			GOTO	$-5
$067E	$2E75			GOTO	$-9
$067F	$3006			MOVLW	6
$0680	$00FB			MOVWF	STACK_11
$0681	$30FF			MOVLW	255
$0682	$00FA			MOVWF	STACK_10
$0683	$0BFB			DECFSZ	STACK_11, F
$0684	$2E86			GOTO	$+2
$0685	$2E89			GOTO	$+4
$0686	$0BFA			DECFSZ	STACK_10, F
$0687	$2E86			GOTO	$-1
$0688	$2E83			GOTO	$-5
$0689	$300A			MOVLW	10
$068A	$00FA			MOVWF	STACK_10
$068B	$0BFA			DECFSZ	STACK_10, F
$068C	$2E8B			GOTO	$-1
;multimeter.c,94 :: 		}
$068D	$2DC9			GOTO	L_amp_meter_12
$068E	$	L_amp_meter_13:
;multimeter.c,95 :: 		}
$068E	$0008			RETURN
$023C	$	_cap_meter:
$023C	$3050			MOVLW	80
$023D	$1303			BCF	STATUS, RP1
$023E	$1683			BSF	STATUS, RP0
$023F	$00A0			MOVWF	lstr5_multimeter+0
$0240	$306C			MOVLW	108
$0241	$00A1			MOVWF	lstr5_multimeter+1
$0242	$307A			MOVLW	122
$0243	$00A2			MOVWF	lstr5_multimeter+2
$0244	$3020			MOVLW	32
$0245	$00A3			MOVWF	lstr5_multimeter+3
$0246	$3077			MOVLW	119
$0247	$00A4			MOVWF	lstr5_multimeter+4
$0248	$3061			MOVLW	97
$0249	$00A5			MOVWF	lstr5_multimeter+5
$024A	$3069			MOVLW	105
$024B	$00A6			MOVWF	lstr5_multimeter+6
$024C	$3074			MOVLW	116
$024D	$00A7			MOVWF	lstr5_multimeter+7
$024E	$01A8			CLRF	lstr5_multimeter+8
$024F	$306E			MOVLW	110
$0250	$00A9			MOVWF	lstr6_multimeter+0
$0251	$3046			MOVLW	70
$0252	$00AA			MOVWF	lstr6_multimeter+1
$0253	$01AB			CLRF	lstr6_multimeter+2
$0254	$3075			MOVLW	117
$0255	$00AC			MOVWF	lstr7_multimeter+0
$0256	$3046			MOVLW	70
$0257	$00AD			MOVWF	lstr7_multimeter+1
$0258	$01AE			CLRF	lstr7_multimeter+2
;multimeter.c,112 :: 		void cap_meter(){
;multimeter.c,113 :: 		Lcd_Cmd(LCD_CLEAR);
$0259	$3001			MOVLW	1
$025A	$00C6			MOVWF	FARG_Lcd_Cmd+0
$025B	$158A			BSF	PCLATH, 3
$025C	$22B1			CALL	_Lcd_Cmd
$025D	$118A			BCF	PCLATH, 3
;multimeter.c,114 :: 		Lcd_Cmd(LCD_FIRST_ROW);
$025E	$3080			MOVLW	128
$025F	$1683			BSF	STATUS, RP0
$0260	$00C6			MOVWF	FARG_Lcd_Cmd+0
$0261	$158A			BSF	PCLATH, 3
$0262	$22B1			CALL	_Lcd_Cmd
$0263	$118A			BCF	PCLATH, 3
;multimeter.c,115 :: 		Lcd_out_cp(codetxt_to_ramtxt(menu[index]));
$0264	$0831			MOVF	_index, 0
$0265	$00F0			MOVWF	STACK_0
$0266	$01F1			CLRF	STACK_0+1
$0267	$300C			MOVLW	12
$0268	$00F4			MOVWF	STACK_4
$0269	$3000			MOVLW	0
$026A	$00F5			MOVWF	STACK_4+1
$026B	$158A			BSF	PCLATH, 3
$026C	$2444			CALL	_mul_16x16_u
$026D	$118A			BCF	PCLATH, 3
$026E	$0870			MOVF	STACK_0, 0
$026F	$3FEC			ADDLW	#_menu
$0270	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$0271	$300B			MOVLW	@#_menu
$0272	$1803			BTFSC	STATUS, C
$0273	$3F01			ADDLW	1
$0274	$0771			ADDWF	STACK_0+1, 0
$0275	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$0276	$158A			BSF	PCLATH, 3
$0277	$241D			CALL	_codetxt_to_ramtxt
$0278	$118A			BCF	PCLATH, 3
$0279	$0870			MOVF	STACK_0, 0
$027A	$00E9			MOVWF	FARG_LCD_Out_CP+0
$027B	$158A			BSF	PCLATH, 3
$027C	$24EA			CALL	_LCD_Out_CP
$027D	$118A			BCF	PCLATH, 3
;multimeter.c,116 :: 		Lcd_out_cp(codetxt_to_ramtxt(msg1));
$027E	$308B			MOVLW	#_msg1
$027F	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$0280	$300D			MOVLW	@#_msg1
$0281	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$0282	$158A			BSF	PCLATH, 3
$0283	$241D			CALL	_codetxt_to_ramtxt
$0284	$118A			BCF	PCLATH, 3
$0285	$0870			MOVF	STACK_0, 0
$0286	$00E9			MOVWF	FARG_LCD_Out_CP+0
$0287	$158A			BSF	PCLATH, 3
$0288	$24EA			CALL	_LCD_Out_CP
$0289	$118A			BCF	PCLATH, 3
;multimeter.c,117 :: 		Lcd_Cmd(LCD_SECOND_ROW);
$028A	$30C0			MOVLW	192
$028B	$1683			BSF	STATUS, RP0
$028C	$00C6			MOVWF	FARG_Lcd_Cmd+0
$028D	$158A			BSF	PCLATH, 3
$028E	$22B1			CALL	_Lcd_Cmd
$028F	$118A			BCF	PCLATH, 3
;multimeter.c,118 :: 		while (PORTC.F1==0){
$0290	$	L_cap_meter_18:
$0290	$3000			MOVLW	0
$0291	$1887			BTFSC	PORTC, 1
$0292	$3001			MOVLW	1
$0293	$00F4			MOVWF	STACK_4
$0294	$0874			MOVF	STACK_4, 0
$0295	$3A00			XORLW	0
$0296	$1D03			BTFSS	STATUS, Z
$0297	$2BE4			GOTO	L_cap_meter_19
;multimeter.c,119 :: 		if (PORTC.F0==1){
$0298	$3001			MOVLW	1
$0299	$0507			ANDWF	PORTC, 0
$029A	$00F4			MOVWF	STACK_4
$029B	$0874			MOVF	STACK_4, 0
$029C	$3A01			XORLW	1
$029D	$1D03			BTFSS	STATUS, Z
$029E	$2BC5			GOTO	L_cap_meter_20
;multimeter.c,120 :: 		Lcd_out_cp("Plz wait");
$029F	$30A0			MOVLW	lstr5_multimeter
$02A0	$00E9			MOVWF	FARG_LCD_Out_CP+0
$02A1	$158A			BSF	PCLATH, 3
$02A2	$24EA			CALL	_LCD_Out_CP
$02A3	$118A			BCF	PCLATH, 3
;multimeter.c,121 :: 		counter=0;
$02A4	$01A1			CLRF	_counter
$02A5	$01A2			CLRF	_counter+1
$02A6	$01A3			CLRF	_counter+2
$02A7	$01A4			CLRF	_counter+3
;multimeter.c,122 :: 		OPTION_REG=0b10001000;
$02A8	$3088			MOVLW	136
$02A9	$1683			BSF	STATUS, RP0
$02AA	$0081			MOVWF	OPTION_REG
;multimeter.c,123 :: 		INTCON.TMR0IF=0;
$02AB	$110B			BCF	INTCON, 2
;multimeter.c,124 :: 		INTCON.TMR0IE=1;
$02AC	$168B			BSF	INTCON, 5
;multimeter.c,125 :: 		INTCON.GIE=1;
$02AD	$178B			BSF	INTCON, 7
;multimeter.c,126 :: 		PORTB.F3=1;
$02AE	$1283			BCF	STATUS, RP0
$02AF	$1586			BSF	PORTB, 3
;multimeter.c,127 :: 		adc_value=ADC_Read(3);
$02B0	$3003			MOVLW	3
$02B1	$00EE			MOVWF	FARG_Adc_Read+0
$02B2	$158A			BSF	PCLATH, 3
$02B3	$23BE			CALL	_Adc_Read
$02B4	$118A			BCF	PCLATH, 3
$02B5	$0870			MOVF	STACK_0, 0
$02B6	$1283			BCF	STATUS, RP0
$02B7	$00AF			MOVWF	_adc_value
$02B8	$0871			MOVF	STACK_0+1, 0
$02B9	$00B0			MOVWF	_adc_value+1
;multimeter.c,128 :: 		TMR0=0;
$02BA	$0181			CLRF	TMR0, 1
;multimeter.c,129 :: 		while (adc_value<0.63*1024){adc_value=ADC_Read(3);}
$02BB	$	L_cap_meter_21:
$02BB	$082F			MOVF	_adc_value, 0
$02BC	$00F0			MOVWF	STACK_0
$02BD	$0830			MOVF	_adc_value+1, 0
$02BE	$00F1			MOVWF	STACK_0+1
$02BF	$158A			BSF	PCLATH, 3
$02C0	$24C0			CALL	_word2double
$02C1	$118A			BCF	PCLATH, 3
$02C2	$30AE			MOVLW	174
$02C3	$00F4			MOVWF	STACK_4
$02C4	$3047			MOVLW	71
$02C5	$00F5			MOVWF	STACK_4+1
$02C6	$3021			MOVLW	33
$02C7	$00F6			MOVWF	STACK_4+2
$02C8	$3088			MOVLW	136
$02C9	$00F7			MOVWF	STACK_4+3
$02CA	$158A			BSF	PCLATH, 3
$02CB	$22F3			CALL	_compare_double
$02CC	$118A			BCF	PCLATH, 3
$02CD	$3001			MOVLW	1
$02CE	$1803			BTFSC	STATUS, C
$02CF	$3000			MOVLW	0
$02D0	$00F0			MOVWF	STACK_0
$02D1	$0870			MOVF	STACK_0, 0
$02D2	$1903			BTFSC	STATUS, Z
$02D3	$2ADF			GOTO	L_cap_meter_22
$02D4	$3003			MOVLW	3
$02D5	$00EE			MOVWF	FARG_Adc_Read+0
$02D6	$158A			BSF	PCLATH, 3
$02D7	$23BE			CALL	_Adc_Read
$02D8	$118A			BCF	PCLATH, 3
$02D9	$0870			MOVF	STACK_0, 0
$02DA	$1283			BCF	STATUS, RP0
$02DB	$00AF			MOVWF	_adc_value
$02DC	$0871			MOVF	STACK_0+1, 0
$02DD	$00B0			MOVWF	_adc_value+1
$02DE	$2ABB			GOTO	L_cap_meter_21
$02DF	$	L_cap_meter_22:
;multimeter.c,130 :: 		timer0=TMR0;
$02DF	$0801			MOVF	TMR0, 0
$02E0	$00C1			MOVWF	_timer0
;multimeter.c,131 :: 		INTCON.GIE=0;
$02E1	$138B			BCF	INTCON, 7
;multimeter.c,132 :: 		INTCON.TMR0IE=0;
$02E2	$128B			BCF	INTCON, 5
;multimeter.c,133 :: 		INTCON.TMR0IF=0;
$02E3	$110B			BCF	INTCON, 2
;multimeter.c,134 :: 		if (!err_c){
$02E4	$0825			MOVF	_err_c, 0
$02E5	$1D03			BTFSS	STATUS, Z
$02E6	$2BB8			GOTO	L_cap_meter_23
;multimeter.c,135 :: 		Lcd_Cmd(LCD_CLEAR);
$02E7	$3001			MOVLW	1
$02E8	$1683			BSF	STATUS, RP0
$02E9	$00C6			MOVWF	FARG_Lcd_Cmd+0
$02EA	$158A			BSF	PCLATH, 3
$02EB	$22B1			CALL	_Lcd_Cmd
$02EC	$118A			BCF	PCLATH, 3
;multimeter.c,136 :: 		Lcd_Cmd(LCD_FIRST_ROW);
$02ED	$3080			MOVLW	128
$02EE	$1683			BSF	STATUS, RP0
$02EF	$00C6			MOVWF	FARG_Lcd_Cmd+0
$02F0	$158A			BSF	PCLATH, 3
$02F1	$22B1			CALL	_Lcd_Cmd
$02F2	$118A			BCF	PCLATH, 3
;multimeter.c,137 :: 		Lcd_out_cp(codetxt_to_ramtxt(menu[index]));
$02F3	$0831			MOVF	_index, 0
$02F4	$00F0			MOVWF	STACK_0
$02F5	$01F1			CLRF	STACK_0+1
$02F6	$300C			MOVLW	12
$02F7	$00F4			MOVWF	STACK_4
$02F8	$3000			MOVLW	0
$02F9	$00F5			MOVWF	STACK_4+1
$02FA	$158A			BSF	PCLATH, 3
$02FB	$2444			CALL	_mul_16x16_u
$02FC	$118A			BCF	PCLATH, 3
$02FD	$0870			MOVF	STACK_0, 0
$02FE	$3FEC			ADDLW	#_menu
$02FF	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$0300	$300B			MOVLW	@#_menu
$0301	$1803			BTFSC	STATUS, C
$0302	$3F01			ADDLW	1
$0303	$0771			ADDWF	STACK_0+1, 0
$0304	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$0305	$158A			BSF	PCLATH, 3
$0306	$241D			CALL	_codetxt_to_ramtxt
$0307	$118A			BCF	PCLATH, 3
$0308	$0870			MOVF	STACK_0, 0
$0309	$00E9			MOVWF	FARG_LCD_Out_CP+0
$030A	$158A			BSF	PCLATH, 3
$030B	$24EA			CALL	_LCD_Out_CP
$030C	$118A			BCF	PCLATH, 3
;multimeter.c,138 :: 		Lcd_out_cp(codetxt_to_ramtxt(msg1));
$030D	$308B			MOVLW	#_msg1
$030E	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$030F	$300D			MOVLW	@#_msg1
$0310	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$0311	$158A			BSF	PCLATH, 3
$0312	$241D			CALL	_codetxt_to_ramtxt
$0313	$118A			BCF	PCLATH, 3
$0314	$0870			MOVF	STACK_0, 0
$0315	$00E9			MOVWF	FARG_LCD_Out_CP+0
$0316	$158A			BSF	PCLATH, 3
$0317	$24EA			CALL	_LCD_Out_CP
$0318	$118A			BCF	PCLATH, 3
;multimeter.c,139 :: 		Lcd_Cmd(LCD_SECOND_ROW);
$0319	$30C0			MOVLW	192
$031A	$1683			BSF	STATUS, RP0
$031B	$00C6			MOVWF	FARG_Lcd_Cmd+0
$031C	$158A			BSF	PCLATH, 3
$031D	$22B1			CALL	_Lcd_Cmd
$031E	$118A			BCF	PCLATH, 3
;multimeter.c,140 :: 		cap_value = (counter*256.0+timer0)*1.0/1000000.0;
$031F	$0821			MOVF	_counter, 0
$0320	$00F0			MOVWF	STACK_0
$0321	$0822			MOVF	_counter+1, 0
$0322	$00F1			MOVWF	STACK_0+1
$0323	$0823			MOVF	_counter+2, 0
$0324	$00F2			MOVWF	STACK_0+2
$0325	$0824			MOVF	_counter+3, 0
$0326	$00F3			MOVWF	STACK_0+3
$0327	$158A			BSF	PCLATH, 3
$0328	$24D6			CALL	_longword2double
$0329	$118A			BCF	PCLATH, 3
$032A	$3000			MOVLW	0
$032B	$00F4			MOVWF	STACK_4
$032C	$3000			MOVLW	0
$032D	$00F5			MOVWF	STACK_4+1
$032E	$3000			MOVLW	0
$032F	$00F6			MOVWF	STACK_4+2
$0330	$3087			MOVLW	135
$0331	$00F7			MOVWF	STACK_4+3
$0332	$158A			BSF	PCLATH, 3
$0333	$218C			CALL	_mul_32x32_fp
$0334	$118A			BCF	PCLATH, 3
$0335	$0870			MOVF	STACK_0, 0
$0336	$1683			BSF	STATUS, RP0
$0337	$00AF			MOVWF	FLOC_cap_meter+15
$0338	$0871			MOVF	STACK_0+1, 0
$0339	$00B0			MOVWF	FLOC_cap_meter+16
$033A	$0872			MOVF	STACK_0+2, 0
$033B	$00B1			MOVWF	FLOC_cap_meter+17
$033C	$0873			MOVF	STACK_0+3, 0
$033D	$00B2			MOVWF	FLOC_cap_meter+18
$033E	$1283			BCF	STATUS, RP0
$033F	$0841			MOVF	_timer0, 0
$0340	$00F0			MOVWF	STACK_0
$0341	$158A			BSF	PCLATH, 3
$0342	$24FE			CALL	_byte2double
$0343	$118A			BCF	PCLATH, 3
$0344	$1683			BSF	STATUS, RP0
$0345	$082F			MOVF	FLOC_cap_meter+15, 0
$0346	$00F4			MOVWF	STACK_4
$0347	$0830			MOVF	FLOC_cap_meter+16, 0
$0348	$00F5			MOVWF	STACK_4+1
$0349	$0831			MOVF	FLOC_cap_meter+17, 0
$034A	$00F6			MOVWF	STACK_4+2
$034B	$0832			MOVF	FLOC_cap_meter+18, 0
$034C	$00F7			MOVWF	STACK_4+3
$034D	$158A			BSF	PCLATH, 3
$034E	$2000			CALL	_add_32x32_fp
$034F	$118A			BCF	PCLATH, 3
$0350	$3000			MOVLW	0
$0351	$00F4			MOVWF	STACK_4
$0352	$3024			MOVLW	36
$0353	$00F5			MOVWF	STACK_4+1
$0354	$3074			MOVLW	116
$0355	$00F6			MOVWF	STACK_4+2
$0356	$3092			MOVLW	146
$0357	$00F7			MOVWF	STACK_4+3
$0358	$158A			BSF	PCLATH, 3
$0359	$20A2			CALL	_div_32x32_fp
$035A	$118A			BCF	PCLATH, 3
$035B	$0870			MOVF	STACK_0, 0
$035C	$00C2			MOVWF	_cap_value
$035D	$0871			MOVF	STACK_0+1, 0
$035E	$00C3			MOVWF	_cap_value+1
$035F	$0872			MOVF	STACK_0+2, 0
$0360	$00C4			MOVWF	_cap_value+2
$0361	$0873			MOVF	STACK_0+3, 0
$0362	$00C5			MOVWF	_cap_value+3
;multimeter.c,141 :: 		if (cap_value < 1.0) {
$0363	$3000			MOVLW	0
$0364	$00F4			MOVWF	STACK_4
$0365	$3000			MOVLW	0
$0366	$00F5			MOVWF	STACK_4+1
$0367	$3000			MOVLW	0
$0368	$00F6			MOVWF	STACK_4+2
$0369	$307F			MOVLW	127
$036A	$00F7			MOVWF	STACK_4+3
$036B	$158A			BSF	PCLATH, 3
$036C	$22F3			CALL	_compare_double
$036D	$118A			BCF	PCLATH, 3
$036E	$3001			MOVLW	1
$036F	$1803			BTFSC	STATUS, C
$0370	$3000			MOVLW	0
$0371	$00F0			MOVWF	STACK_0
$0372	$0870			MOVF	STACK_0, 0
$0373	$1903			BTFSC	STATUS, Z
$0374	$2BA0			GOTO	L_cap_meter_24
;multimeter.c,142 :: 		FloatToStr(cap_value*1000.0,str);
$0375	$0842			MOVF	_cap_value, 0
$0376	$00F0			MOVWF	STACK_0
$0377	$0843			MOVF	_cap_value+1, 0
$0378	$00F1			MOVWF	STACK_0+1
$0379	$0844			MOVF	_cap_value+2, 0
$037A	$00F2			MOVWF	STACK_0+2
$037B	$0845			MOVF	_cap_value+3, 0
$037C	$00F3			MOVWF	STACK_0+3
$037D	$3000			MOVLW	0
$037E	$00F4			MOVWF	STACK_4
$037F	$3000			MOVLW	0
$0380	$00F5			MOVWF	STACK_4+1
$0381	$307A			MOVLW	122
$0382	$00F6			MOVWF	STACK_4+2
$0383	$3088			MOVLW	136
$0384	$00F7			MOVWF	STACK_4+3
$0385	$158A			BSF	PCLATH, 3
$0386	$218C			CALL	_mul_32x32_fp
$0387	$118A			BCF	PCLATH, 3
$0388	$0870			MOVF	STACK_0, 0
$0389	$00E9			MOVWF	FARG_FloatToStr+0
$038A	$0871			MOVF	STACK_0+1, 0
$038B	$00EA			MOVWF	FARG_FloatToStr+1
$038C	$0872			MOVF	STACK_0+2, 0
$038D	$00EB			MOVWF	FARG_FloatToStr+2
$038E	$0873			MOVF	STACK_0+3, 0
$038F	$00EC			MOVWF	FARG_FloatToStr+3
$0390	$3032			MOVLW	_str
$0391	$00ED			MOVWF	FARG_FloatToStr+4
$0392	$2038			CALL	_FloatToStr
;multimeter.c,143 :: 		Lcd_Out_cp(str);
$0393	$3032			MOVLW	_str
$0394	$1303			BCF	STATUS, RP1
$0395	$1283			BCF	STATUS, RP0
$0396	$00E9			MOVWF	FARG_LCD_Out_CP+0
$0397	$158A			BSF	PCLATH, 3
$0398	$24EA			CALL	_LCD_Out_CP
$0399	$118A			BCF	PCLATH, 3
;multimeter.c,144 :: 		Lcd_Out_cp("nF");
$039A	$30A9			MOVLW	lstr6_multimeter
$039B	$00E9			MOVWF	FARG_LCD_Out_CP+0
$039C	$158A			BSF	PCLATH, 3
$039D	$24EA			CALL	_LCD_Out_CP
$039E	$118A			BCF	PCLATH, 3
;multimeter.c,145 :: 		}
$039F	$2BB7			GOTO	L_cap_meter_25
$03A0	$	L_cap_meter_24:
;multimeter.c,147 :: 		FloatToStr(cap_value,str);
$03A0	$0842			MOVF	_cap_value, 0
$03A1	$00E9			MOVWF	FARG_FloatToStr+0
$03A2	$0843			MOVF	_cap_value+1, 0
$03A3	$00EA			MOVWF	FARG_FloatToStr+1
$03A4	$0844			MOVF	_cap_value+2, 0
$03A5	$00EB			MOVWF	FARG_FloatToStr+2
$03A6	$0845			MOVF	_cap_value+3, 0
$03A7	$00EC			MOVWF	FARG_FloatToStr+3
$03A8	$3032			MOVLW	_str
$03A9	$00ED			MOVWF	FARG_FloatToStr+4
$03AA	$2038			CALL	_FloatToStr
;multimeter.c,148 :: 		Lcd_Out_cp(str);
$03AB	$3032			MOVLW	_str
$03AC	$1303			BCF	STATUS, RP1
$03AD	$1283			BCF	STATUS, RP0
$03AE	$00E9			MOVWF	FARG_LCD_Out_CP+0
$03AF	$158A			BSF	PCLATH, 3
$03B0	$24EA			CALL	_LCD_Out_CP
$03B1	$118A			BCF	PCLATH, 3
;multimeter.c,149 :: 		Lcd_Out_cp("uF");
$03B2	$30AC			MOVLW	lstr7_multimeter
$03B3	$00E9			MOVWF	FARG_LCD_Out_CP+0
$03B4	$158A			BSF	PCLATH, 3
$03B5	$24EA			CALL	_LCD_Out_CP
$03B6	$118A			BCF	PCLATH, 3
;multimeter.c,150 :: 		}
$03B7	$	L_cap_meter_25:
;multimeter.c,151 :: 		}
$03B7	$2BC5			GOTO	L_cap_meter_26
$03B8	$	L_cap_meter_23:
;multimeter.c,153 :: 		Lcd_out_cp(codetxt_to_ramtxt(err));
$03B8	$3036			MOVLW	#_err
$03B9	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$03BA	$300D			MOVLW	@#_err
$03BB	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$03BC	$158A			BSF	PCLATH, 3
$03BD	$241D			CALL	_codetxt_to_ramtxt
$03BE	$118A			BCF	PCLATH, 3
$03BF	$0870			MOVF	STACK_0, 0
$03C0	$00E9			MOVWF	FARG_LCD_Out_CP+0
$03C1	$158A			BSF	PCLATH, 3
$03C2	$24EA			CALL	_LCD_Out_CP
$03C3	$118A			BCF	PCLATH, 3
;multimeter.c,154 :: 		err_c=0;}
$03C4	$01A5			CLRF	_err_c, 1
$03C5	$	L_cap_meter_26:
;multimeter.c,155 :: 		}
$03C5	$	L_cap_meter_20:
;multimeter.c,156 :: 		delay_ms(200);
$03C5	$3002			MOVLW	2
$03C6	$00FC			MOVWF	STACK_12
$03C7	$30FF			MOVLW	255
$03C8	$00FB			MOVWF	STACK_11
$03C9	$30FF			MOVLW	255
$03CA	$00FA			MOVWF	STACK_10
$03CB	$0BFC			DECFSZ	STACK_12, F
$03CC	$2BCE			GOTO	$+2
$03CD	$2BD5			GOTO	$+8
$03CE	$0BFB			DECFSZ	STACK_11, F
$03CF	$2BD1			GOTO	$+2
$03D0	$2BD4			GOTO	$+4
$03D1	$0BFA			DECFSZ	STACK_10, F
$03D2	$2BD1			GOTO	$-1
$03D3	$2BCE			GOTO	$-5
$03D4	$2BCB			GOTO	$-9
$03D5	$3006			MOVLW	6
$03D6	$00FB			MOVWF	STACK_11
$03D7	$30FF			MOVLW	255
$03D8	$00FA			MOVWF	STACK_10
$03D9	$0BFB			DECFSZ	STACK_11, F
$03DA	$2BDC			GOTO	$+2
$03DB	$2BDF			GOTO	$+4
$03DC	$0BFA			DECFSZ	STACK_10, F
$03DD	$2BDC			GOTO	$-1
$03DE	$2BD9			GOTO	$-5
$03DF	$300A			MOVLW	10
$03E0	$00FA			MOVWF	STACK_10
$03E1	$0BFA			DECFSZ	STACK_10, F
$03E2	$2BE1			GOTO	$-1
;multimeter.c,157 :: 		}
$03E3	$2A90			GOTO	L_cap_meter_18
$03E4	$	L_cap_meter_19:
;multimeter.c,158 :: 		}
$03E4	$0008			RETURN
$03E5	$	_res_meter:
$03E5	$3020			MOVLW	32
$03E6	$1303			BCF	STATUS, RP1
$03E7	$1283			BCF	STATUS, RP0
$03E8	$00DE			MOVWF	lstr4_multimeter+0
$03E9	$304B			MOVLW	75
$03EA	$00DF			MOVWF	lstr4_multimeter+1
$03EB	$01E0			CLRF	lstr4_multimeter+2
;multimeter.c,97 :: 		void res_meter(){
;multimeter.c,98 :: 		while (PORTC.F1==0){
$03EC	$	L_res_meter_16:
$03EC	$3000			MOVLW	0
$03ED	$1887			BTFSC	PORTC, 1
$03EE	$3001			MOVLW	1
$03EF	$00F4			MOVWF	STACK_4
$03F0	$0874			MOVF	STACK_4, 0
$03F1	$3A00			XORLW	0
$03F2	$1D03			BTFSS	STATUS, Z
$03F3	$2CD6			GOTO	L_res_meter_17
;multimeter.c,99 :: 		Lcd_Cmd(LCD_CLEAR);
$03F4	$3001			MOVLW	1
$03F5	$1683			BSF	STATUS, RP0
$03F6	$00C6			MOVWF	FARG_Lcd_Cmd+0
$03F7	$158A			BSF	PCLATH, 3
$03F8	$22B1			CALL	_Lcd_Cmd
$03F9	$118A			BCF	PCLATH, 3
;multimeter.c,100 :: 		Lcd_Cmd(LCD_FIRST_ROW);
$03FA	$3080			MOVLW	128
$03FB	$1683			BSF	STATUS, RP0
$03FC	$00C6			MOVWF	FARG_Lcd_Cmd+0
$03FD	$158A			BSF	PCLATH, 3
$03FE	$22B1			CALL	_Lcd_Cmd
$03FF	$118A			BCF	PCLATH, 3
;multimeter.c,101 :: 		Lcd_out_cp(codetxt_to_ramtxt(menu[index]));
$0400	$0831			MOVF	_index, 0
$0401	$00F0			MOVWF	STACK_0
$0402	$01F1			CLRF	STACK_0+1
$0403	$300C			MOVLW	12
$0404	$00F4			MOVWF	STACK_4
$0405	$3000			MOVLW	0
$0406	$00F5			MOVWF	STACK_4+1
$0407	$158A			BSF	PCLATH, 3
$0408	$2444			CALL	_mul_16x16_u
$0409	$118A			BCF	PCLATH, 3
$040A	$0870			MOVF	STACK_0, 0
$040B	$3FEC			ADDLW	#_menu
$040C	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$040D	$300B			MOVLW	@#_menu
$040E	$1803			BTFSC	STATUS, C
$040F	$3F01			ADDLW	1
$0410	$0771			ADDWF	STACK_0+1, 0
$0411	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$0412	$158A			BSF	PCLATH, 3
$0413	$241D			CALL	_codetxt_to_ramtxt
$0414	$118A			BCF	PCLATH, 3
$0415	$0870			MOVF	STACK_0, 0
$0416	$00E9			MOVWF	FARG_LCD_Out_CP+0
$0417	$158A			BSF	PCLATH, 3
$0418	$24EA			CALL	_LCD_Out_CP
$0419	$118A			BCF	PCLATH, 3
;multimeter.c,102 :: 		Lcd_out_cp(codetxt_to_ramtxt(msg1));
$041A	$308B			MOVLW	#_msg1
$041B	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$041C	$300D			MOVLW	@#_msg1
$041D	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$041E	$158A			BSF	PCLATH, 3
$041F	$241D			CALL	_codetxt_to_ramtxt
$0420	$118A			BCF	PCLATH, 3
$0421	$0870			MOVF	STACK_0, 0
$0422	$00E9			MOVWF	FARG_LCD_Out_CP+0
$0423	$158A			BSF	PCLATH, 3
$0424	$24EA			CALL	_LCD_Out_CP
$0425	$118A			BCF	PCLATH, 3
;multimeter.c,103 :: 		Lcd_Cmd(LCD_SECOND_ROW);
$0426	$30C0			MOVLW	192
$0427	$1683			BSF	STATUS, RP0
$0428	$00C6			MOVWF	FARG_Lcd_Cmd+0
$0429	$158A			BSF	PCLATH, 3
$042A	$22B1			CALL	_Lcd_Cmd
$042B	$118A			BCF	PCLATH, 3
;multimeter.c,104 :: 		adc_value=ADC_Read(2);
$042C	$3002			MOVLW	2
$042D	$00EE			MOVWF	FARG_Adc_Read+0
$042E	$158A			BSF	PCLATH, 3
$042F	$23BE			CALL	_Adc_Read
$0430	$118A			BCF	PCLATH, 3
$0431	$0870			MOVF	STACK_0, 0
$0432	$1283			BCF	STATUS, RP0
$0433	$00AF			MOVWF	_adc_value
$0434	$0871			MOVF	STACK_0+1, 0
$0435	$00B0			MOVWF	_adc_value+1
;multimeter.c,105 :: 		FloatToStr(((adc_value/1024.0)*5)*10.0/(5-((adc_value/1024.0)*5)),str);
$0436	$158A			BSF	PCLATH, 3
$0437	$24C0			CALL	_word2double
$0438	$118A			BCF	PCLATH, 3
$0439	$3000			MOVLW	0
$043A	$00F4			MOVWF	STACK_4
$043B	$3000			MOVLW	0
$043C	$00F5			MOVWF	STACK_4+1
$043D	$3000			MOVLW	0
$043E	$00F6			MOVWF	STACK_4+2
$043F	$3089			MOVLW	137
$0440	$00F7			MOVWF	STACK_4+3
$0441	$158A			BSF	PCLATH, 3
$0442	$20A2			CALL	_div_32x32_fp
$0443	$118A			BCF	PCLATH, 3
$0444	$3000			MOVLW	0
$0445	$00F4			MOVWF	STACK_4
$0446	$3000			MOVLW	0
$0447	$00F5			MOVWF	STACK_4+1
$0448	$3020			MOVLW	32
$0449	$00F6			MOVWF	STACK_4+2
$044A	$3081			MOVLW	129
$044B	$00F7			MOVWF	STACK_4+3
$044C	$158A			BSF	PCLATH, 3
$044D	$218C			CALL	_mul_32x32_fp
$044E	$118A			BCF	PCLATH, 3
$044F	$0870			MOVF	STACK_0, 0
$0450	$00E5			MOVWF	FLOC_res_meter+7
$0451	$0871			MOVF	STACK_0+1, 0
$0452	$00E6			MOVWF	FLOC_res_meter+8
$0453	$0872			MOVF	STACK_0+2, 0
$0454	$00E7			MOVWF	FLOC_res_meter+9
$0455	$0873			MOVF	STACK_0+3, 0
$0456	$00E8			MOVWF	FLOC_res_meter+10
$0457	$0865			MOVF	FLOC_res_meter+7, 0
$0458	$00F0			MOVWF	STACK_0
$0459	$0866			MOVF	FLOC_res_meter+8, 0
$045A	$00F1			MOVWF	STACK_0+1
$045B	$0867			MOVF	FLOC_res_meter+9, 0
$045C	$00F2			MOVWF	STACK_0+2
$045D	$0868			MOVF	FLOC_res_meter+10, 0
$045E	$00F3			MOVWF	STACK_0+3
$045F	$3000			MOVLW	0
$0460	$00F4			MOVWF	STACK_4
$0461	$3000			MOVLW	0
$0462	$00F5			MOVWF	STACK_4+1
$0463	$3020			MOVLW	32
$0464	$00F6			MOVWF	STACK_4+2
$0465	$3082			MOVLW	130
$0466	$00F7			MOVWF	STACK_4+3
$0467	$158A			BSF	PCLATH, 3
$0468	$218C			CALL	_mul_32x32_fp
$0469	$118A			BCF	PCLATH, 3
$046A	$0870			MOVF	STACK_0, 0
$046B	$00E1			MOVWF	FLOC_res_meter+3
$046C	$0871			MOVF	STACK_0+1, 0
$046D	$00E2			MOVWF	FLOC_res_meter+4
$046E	$0872			MOVF	STACK_0+2, 0
$046F	$00E3			MOVWF	FLOC_res_meter+5
$0470	$0873			MOVF	STACK_0+3, 0
$0471	$00E4			MOVWF	FLOC_res_meter+6
$0472	$0865			MOVF	FLOC_res_meter+7, 0
$0473	$00F0			MOVWF	STACK_0
$0474	$0866			MOVF	FLOC_res_meter+8, 0
$0475	$00F1			MOVWF	STACK_0+1
$0476	$0867			MOVF	FLOC_res_meter+9, 0
$0477	$00F2			MOVWF	STACK_0+2
$0478	$0868			MOVF	FLOC_res_meter+10, 0
$0479	$00F3			MOVWF	STACK_0+3
$047A	$0870			MOVF	STACK_0, 0
$047B	$00F4			MOVWF	STACK_4
$047C	$0871			MOVF	STACK_0+1, 0
$047D	$00F5			MOVWF	STACK_4+1
$047E	$0872			MOVF	STACK_0+2, 0
$047F	$00F6			MOVWF	STACK_4+2
$0480	$0873			MOVF	STACK_0+3, 0
$0481	$00F7			MOVWF	STACK_4+3
$0482	$3000			MOVLW	0
$0483	$00F0			MOVWF	STACK_0
$0484	$3000			MOVLW	0
$0485	$00F1			MOVWF	STACK_0+1
$0486	$3020			MOVLW	32
$0487	$00F2			MOVWF	STACK_0+2
$0488	$3081			MOVLW	129
$0489	$00F3			MOVWF	STACK_0+3
$048A	$158A			BSF	PCLATH, 3
$048B	$256D			CALL	_sub_32x32_fp
$048C	$118A			BCF	PCLATH, 3
$048D	$0870			MOVF	STACK_0, 0
$048E	$00F4			MOVWF	STACK_4
$048F	$0871			MOVF	STACK_0+1, 0
$0490	$00F5			MOVWF	STACK_4+1
$0491	$0872			MOVF	STACK_0+2, 0
$0492	$00F6			MOVWF	STACK_4+2
$0493	$0873			MOVF	STACK_0+3, 0
$0494	$00F7			MOVWF	STACK_4+3
$0495	$0861			MOVF	FLOC_res_meter+3, 0
$0496	$00F0			MOVWF	STACK_0
$0497	$0862			MOVF	FLOC_res_meter+4, 0
$0498	$00F1			MOVWF	STACK_0+1
$0499	$0863			MOVF	FLOC_res_meter+5, 0
$049A	$00F2			MOVWF	STACK_0+2
$049B	$0864			MOVF	FLOC_res_meter+6, 0
$049C	$00F3			MOVWF	STACK_0+3
$049D	$158A			BSF	PCLATH, 3
$049E	$20A2			CALL	_div_32x32_fp
$049F	$118A			BCF	PCLATH, 3
$04A0	$0870			MOVF	STACK_0, 0
$04A1	$00E9			MOVWF	FARG_FloatToStr+0
$04A2	$0871			MOVF	STACK_0+1, 0
$04A3	$00EA			MOVWF	FARG_FloatToStr+1
$04A4	$0872			MOVF	STACK_0+2, 0
$04A5	$00EB			MOVWF	FARG_FloatToStr+2
$04A6	$0873			MOVF	STACK_0+3, 0
$04A7	$00EC			MOVWF	FARG_FloatToStr+3
$04A8	$3032			MOVLW	_str
$04A9	$00ED			MOVWF	FARG_FloatToStr+4
$04AA	$2038			CALL	_FloatToStr
;multimeter.c,106 :: 		Lcd_out_cp(str);
$04AB	$3032			MOVLW	_str
$04AC	$1303			BCF	STATUS, RP1
$04AD	$1283			BCF	STATUS, RP0
$04AE	$00E9			MOVWF	FARG_LCD_Out_CP+0
$04AF	$158A			BSF	PCLATH, 3
$04B0	$24EA			CALL	_LCD_Out_CP
$04B1	$118A			BCF	PCLATH, 3
;multimeter.c,107 :: 		Lcd_out_cp(" K");
$04B2	$305E			MOVLW	lstr4_multimeter
$04B3	$00E9			MOVWF	FARG_LCD_Out_CP+0
$04B4	$158A			BSF	PCLATH, 3
$04B5	$24EA			CALL	_LCD_Out_CP
$04B6	$118A			BCF	PCLATH, 3
;multimeter.c,108 :: 		delay_ms(200);
$04B7	$3002			MOVLW	2
$04B8	$00FC			MOVWF	STACK_12
$04B9	$30FF			MOVLW	255
$04BA	$00FB			MOVWF	STACK_11
$04BB	$30FF			MOVLW	255
$04BC	$00FA			MOVWF	STACK_10
$04BD	$0BFC			DECFSZ	STACK_12, F
$04BE	$2CC0			GOTO	$+2
$04BF	$2CC7			GOTO	$+8
$04C0	$0BFB			DECFSZ	STACK_11, F
$04C1	$2CC3			GOTO	$+2
$04C2	$2CC6			GOTO	$+4
$04C3	$0BFA			DECFSZ	STACK_10, F
$04C4	$2CC3			GOTO	$-1
$04C5	$2CC0			GOTO	$-5
$04C6	$2CBD			GOTO	$-9
$04C7	$3006			MOVLW	6
$04C8	$00FB			MOVWF	STACK_11
$04C9	$30FF			MOVLW	255
$04CA	$00FA			MOVWF	STACK_10
$04CB	$0BFB			DECFSZ	STACK_11, F
$04CC	$2CCE			GOTO	$+2
$04CD	$2CD1			GOTO	$+4
$04CE	$0BFA			DECFSZ	STACK_10, F
$04CF	$2CCE			GOTO	$-1
$04D0	$2CCB			GOTO	$-5
$04D1	$300A			MOVLW	10
$04D2	$00FA			MOVWF	STACK_10
$04D3	$0BFA			DECFSZ	STACK_10, F
$04D4	$2CD3			GOTO	$-1
;multimeter.c,109 :: 		}
$04D5	$2BEC			GOTO	L_res_meter_16
$04D6	$	L_res_meter_17:
;multimeter.c,110 :: 		}
$04D6	$0008			RETURN
$0940	$	_Lcd_Init:
$0940	$250E			CALL	_Delay_5500us
$0941	$250E			CALL	_Delay_5500us
$0942	$250E			CALL	_Delay_5500us
$0943	$085D			MOVF	FARG_Lcd_Init+0, 0
$0944	$00A6			MOVWF	LCD_port_address
$0945	$085D			MOVF	FARG_Lcd_Init+0, 0
$0946	$0084			MOVWF	FSR
$0947	$1784			BSF	FSR, 7
$0948	$1180			BCF	INDF, ___ENABLE
$0949	$1100			BCF	INDF, ___RS
$094A	$1000			BCF	INDF, ___RW
$094B	$1380			BCF	INDF, ___DB7
$094C	$1300			BCF	INDF, ___DB6
$094D	$1280			BCF	INDF, ___DB5
$094E	$1200			BCF	INDF, ___DB4
$094F	$1384			BCF	FSR, 7
$0950	$1180			BCF	INDF, ___ENABLE
$0951	$1100			BCF	INDF, ___RS
$0952	$1000			BCF	INDF, ___RW
$0953	$1380			BCF	INDF, ___DB7
$0954	$1300			BCF	INDF, ___DB6
$0955	$1280			BCF	INDF, ___DB5
$0956	$1200			BCF	INDF, ___DB4
$0957	$1680			BSF	INDF, ___DB5
$0958	$1600			BSF	INDF, ___DB4
$0959	$1580			BSF	INDF, ___ENABLE
$095A	$1180			BCF	INDF, ___ENABLE
$095B	$250E			CALL	_Delay_5500us
$095C	$1580			BSF	INDF, ___ENABLE
$095D	$1180			BCF	INDF, ___ENABLE
$095E	$250E			CALL	_Delay_5500us
$095F	$1580			BSF	INDF, ___ENABLE
$0960	$1180			BCF	INDF, ___ENABLE
$0961	$250E			CALL	_Delay_5500us
$0962	$1680			BSF	INDF, ___DB5
$0963	$1200			BCF	INDF, ___DB4
$0964	$1580			BSF	INDF, ___ENABLE
$0965	$1180			BCF	INDF, ___ENABLE
$0966	$250E			CALL	_Delay_5500us
$0967	$0180			CLRF	INDF
$0968	$1680			BSF	INDF, ___DB5
$0969	$1580			BSF	INDF, ___ENABLE
$096A	$1180			BCF	INDF, ___ENABLE
$096B	$0180			CLRF	INDF
$096C	$1780			BSF	INDF, ___DB7
$096D	$1580			BSF	INDF, ___ENABLE
$096E	$1180			BCF	INDF, ___ENABLE
$096F	$250E			CALL	_Delay_5500us
$0970	$0180			CLRF	INDF
$0971	$1600			BSF	INDF, ___DB4
$0972	$1580			BSF	INDF, ___ENABLE
$0973	$1180			BCF	INDF, ___ENABLE
$0974	$0180			CLRF	INDF
$0975	$1580			BSF	INDF, ___ENABLE
$0976	$1180			BCF	INDF, ___ENABLE
$0977	$250E			CALL	_Delay_5500us
$0978	$0180			CLRF	INDF
$0979	$1580			BSF	INDF, ___ENABLE
$097A	$1180			BCF	INDF, ___ENABLE
$097B	$1600			BSF	INDF, ___DB4
$097C	$1580			BSF	INDF, ___ENABLE
$097D	$1180			BCF	INDF, ___ENABLE
$097E	$250E			CALL	_Delay_5500us
$097F	$0180			CLRF	INDF
$0980	$1580			BSF	INDF, ___ENABLE
$0981	$1180			BCF	INDF, ___ENABLE
$0982	$1600			BSF	INDF, ___DB4
$0983	$1680			BSF	INDF, ___DB5
$0984	$1700			BSF	INDF, ___DB6
$0985	$1780			BSF	INDF, ___DB7
$0986	$1580			BSF	INDF, ___ENABLE
$0987	$1180			BCF	INDF, ___ENABLE
$0988	$250E			CALL	_Delay_5500us
$0989	$3001			MOVLW	1
$098A	$00A7			MOVWF	LCD_cmd_status
$098B	$0008			RETURN
$0D84	$	_ADC_Init:
;multimeter.c,22 :: 		void ADC_Init(){
;multimeter.c,23 :: 		ADCON1 = 0x80;
$0D84	$3080			MOVLW	128
$0D85	$1303			BCF	STATUS, RP1
$0D86	$1683			BSF	STATUS, RP0
$0D87	$009F			MOVWF	ADCON1
;multimeter.c,24 :: 		TRISA  = 0xFF;
$0D88	$30FF			MOVLW	255
$0D89	$0085			MOVWF	TRISA
;multimeter.c,25 :: 		}
$0D8A	$0008			RETURN
$0B74	$	_up:
;multimeter.c,160 :: 		void up(){
;multimeter.c,161 :: 		if (index==0){return ;}
$0B74	$1303			BCF	STATUS, RP1
$0B75	$1283			BCF	STATUS, RP0
$0B76	$0831			MOVF	_index, 0
$0B77	$3A00			XORLW	0
$0B78	$1D03			BTFSS	STATUS, Z
$0B79	$2B7B			GOTO	L_up_27
$0B7A	$0008			RETURN
$0B7B	$	L_up_27:
;multimeter.c,162 :: 		index-=1;
$0B7B	$03B1			DECF	_index, 1
;multimeter.c,163 :: 		Lcd_Cmd(LCD_CLEAR);
$0B7C	$3001			MOVLW	1
$0B7D	$1683			BSF	STATUS, RP0
$0B7E	$00C6			MOVWF	FARG_Lcd_Cmd+0
$0B7F	$22B1			CALL	_Lcd_Cmd
;multimeter.c,164 :: 		Lcd_Cmd(LCD_FIRST_ROW);
$0B80	$3080			MOVLW	128
$0B81	$1683			BSF	STATUS, RP0
$0B82	$00C6			MOVWF	FARG_Lcd_Cmd+0
$0B83	$22B1			CALL	_Lcd_Cmd
;multimeter.c,165 :: 		Lcd_out_cp(codetxt_to_ramtxt(menu[index]));
$0B84	$0831			MOVF	_index, 0
$0B85	$00F0			MOVWF	STACK_0
$0B86	$01F1			CLRF	STACK_0+1
$0B87	$300C			MOVLW	12
$0B88	$00F4			MOVWF	STACK_4
$0B89	$3000			MOVLW	0
$0B8A	$00F5			MOVWF	STACK_4+1
$0B8B	$2444			CALL	_mul_16x16_u
$0B8C	$0870			MOVF	STACK_0, 0
$0B8D	$3FEC			ADDLW	#_menu
$0B8E	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$0B8F	$300B			MOVLW	@#_menu
$0B90	$1803			BTFSC	STATUS, C
$0B91	$3F01			ADDLW	1
$0B92	$0771			ADDWF	STACK_0+1, 0
$0B93	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$0B94	$241D			CALL	_codetxt_to_ramtxt
$0B95	$0870			MOVF	STACK_0, 0
$0B96	$00E9			MOVWF	FARG_LCD_Out_CP+0
$0B97	$24EA			CALL	_LCD_Out_CP
;multimeter.c,166 :: 		}
$0B98	$0008			RETURN
$09EF	$	_ok:
;multimeter.c,176 :: 		void ok(){
;multimeter.c,177 :: 		switch (index){
$09EF	$2A3F			GOTO	L_ok_29
;multimeter.c,178 :: 		case 0:delay_ms(150);volt_meter();       //delay to prevent the function from returning immediately
$09F0	$	L_ok_31:
$09F0	$30C3			MOVLW	195
$09F1	$1303			BCF	STATUS, RP1
$09F2	$1283			BCF	STATUS, RP0
$09F3	$00FB			MOVWF	STACK_11
$09F4	$30FF			MOVLW	255
$09F5	$00FA			MOVWF	STACK_10
$09F6	$0BFB			DECFSZ	STACK_11, F
$09F7	$29F9			GOTO	$+2
$09F8	$29FC			GOTO	$+4
$09F9	$0BFA			DECFSZ	STACK_10, F
$09FA	$29F9			GOTO	$-1
$09FB	$29F6			GOTO	$-5
$09FC	$304B			MOVLW	75
$09FD	$00FA			MOVWF	STACK_10
$09FE	$0BFA			DECFSZ	STACK_10, F
$09FF	$29FE			GOTO	$-1
$0A00	$0000			NOP
$0A01	$118A			BCF	PCLATH, 3
$0A02	$24D7			CALL	_volt_meter
$0A03	$158A			BSF	PCLATH, 3
;multimeter.c,179 :: 		break;
$0A04	$2A52			GOTO	L_ok_30
;multimeter.c,180 :: 		case 1:delay_ms(150);amp_meter();
$0A05	$	L_ok_32:
$0A05	$30C3			MOVLW	195
$0A06	$00FB			MOVWF	STACK_11
$0A07	$30FF			MOVLW	255
$0A08	$00FA			MOVWF	STACK_10
$0A09	$0BFB			DECFSZ	STACK_11, F
$0A0A	$2A0C			GOTO	$+2
$0A0B	$2A0F			GOTO	$+4
$0A0C	$0BFA			DECFSZ	STACK_10, F
$0A0D	$2A0C			GOTO	$-1
$0A0E	$2A09			GOTO	$-5
$0A0F	$304B			MOVLW	75
$0A10	$00FA			MOVWF	STACK_10
$0A11	$0BFA			DECFSZ	STACK_10, F
$0A12	$2A11			GOTO	$-1
$0A13	$0000			NOP
$0A14	$118A			BCF	PCLATH, 3
$0A15	$25C2			CALL	_amp_meter
$0A16	$158A			BSF	PCLATH, 3
;multimeter.c,181 :: 		break;
$0A17	$2A52			GOTO	L_ok_30
;multimeter.c,182 :: 		case 2:delay_ms(150);cap_meter();
$0A18	$	L_ok_33:
$0A18	$30C3			MOVLW	195
$0A19	$00FB			MOVWF	STACK_11
$0A1A	$30FF			MOVLW	255
$0A1B	$00FA			MOVWF	STACK_10
$0A1C	$0BFB			DECFSZ	STACK_11, F
$0A1D	$2A1F			GOTO	$+2
$0A1E	$2A22			GOTO	$+4
$0A1F	$0BFA			DECFSZ	STACK_10, F
$0A20	$2A1F			GOTO	$-1
$0A21	$2A1C			GOTO	$-5
$0A22	$304B			MOVLW	75
$0A23	$00FA			MOVWF	STACK_10
$0A24	$0BFA			DECFSZ	STACK_10, F
$0A25	$2A24			GOTO	$-1
$0A26	$0000			NOP
$0A27	$118A			BCF	PCLATH, 3
$0A28	$223C			CALL	_cap_meter
$0A29	$158A			BSF	PCLATH, 3
;multimeter.c,183 :: 		break;
$0A2A	$2A52			GOTO	L_ok_30
;multimeter.c,184 :: 		case 3:delay_ms(150);res_meter();
$0A2B	$	L_ok_34:
$0A2B	$30C3			MOVLW	195
$0A2C	$00FB			MOVWF	STACK_11
$0A2D	$30FF			MOVLW	255
$0A2E	$00FA			MOVWF	STACK_10
$0A2F	$0BFB			DECFSZ	STACK_11, F
$0A30	$2A32			GOTO	$+2
$0A31	$2A35			GOTO	$+4
$0A32	$0BFA			DECFSZ	STACK_10, F
$0A33	$2A32			GOTO	$-1
$0A34	$2A2F			GOTO	$-5
$0A35	$304B			MOVLW	75
$0A36	$00FA			MOVWF	STACK_10
$0A37	$0BFA			DECFSZ	STACK_10, F
$0A38	$2A37			GOTO	$-1
$0A39	$0000			NOP
$0A3A	$118A			BCF	PCLATH, 3
$0A3B	$23E5			CALL	_res_meter
$0A3C	$158A			BSF	PCLATH, 3
;multimeter.c,185 :: 		break;
$0A3D	$2A52			GOTO	L_ok_30
;multimeter.c,186 :: 		default:
$0A3E	$	L_ok_35:
;multimeter.c,187 :: 		return;
$0A3E	$0008			RETURN
;multimeter.c,188 :: 		}
$0A3F	$	L_ok_29:
$0A3F	$1303			BCF	STATUS, RP1
$0A40	$1283			BCF	STATUS, RP0
$0A41	$0831			MOVF	_index, 0
$0A42	$3A00			XORLW	0
$0A43	$1903			BTFSC	STATUS, Z
$0A44	$29F0			GOTO	L_ok_31
$0A45	$0831			MOVF	_index, 0
$0A46	$3A01			XORLW	1
$0A47	$1903			BTFSC	STATUS, Z
$0A48	$2A05			GOTO	L_ok_32
$0A49	$0831			MOVF	_index, 0
$0A4A	$3A02			XORLW	2
$0A4B	$1903			BTFSC	STATUS, Z
$0A4C	$2A18			GOTO	L_ok_33
$0A4D	$0831			MOVF	_index, 0
$0A4E	$3A03			XORLW	3
$0A4F	$1903			BTFSC	STATUS, Z
$0A50	$2A2B			GOTO	L_ok_34
$0A51	$2A3E			GOTO	L_ok_35
$0A52	$	L_ok_30:
;multimeter.c,189 :: 		}
$0A52	$0008			RETURN
$0B99	$	_down:
;multimeter.c,168 :: 		void down(){
;multimeter.c,169 :: 		if (index==3){return ;}
$0B99	$1303			BCF	STATUS, RP1
$0B9A	$1283			BCF	STATUS, RP0
$0B9B	$0831			MOVF	_index, 0
$0B9C	$3A03			XORLW	3
$0B9D	$1D03			BTFSS	STATUS, Z
$0B9E	$2BA0			GOTO	L_down_28
$0B9F	$0008			RETURN
$0BA0	$	L_down_28:
;multimeter.c,170 :: 		index+=1;
$0BA0	$0AB1			INCF	_index, 1
;multimeter.c,171 :: 		Lcd_Cmd(LCD_CLEAR);
$0BA1	$3001			MOVLW	1
$0BA2	$1683			BSF	STATUS, RP0
$0BA3	$00C6			MOVWF	FARG_Lcd_Cmd+0
$0BA4	$22B1			CALL	_Lcd_Cmd
;multimeter.c,172 :: 		Lcd_Cmd(LCD_FIRST_ROW);
$0BA5	$3080			MOVLW	128
$0BA6	$1683			BSF	STATUS, RP0
$0BA7	$00C6			MOVWF	FARG_Lcd_Cmd+0
$0BA8	$22B1			CALL	_Lcd_Cmd
;multimeter.c,173 :: 		Lcd_out_cp(codetxt_to_ramtxt(menu[index]));
$0BA9	$0831			MOVF	_index, 0
$0BAA	$00F0			MOVWF	STACK_0
$0BAB	$01F1			CLRF	STACK_0+1
$0BAC	$300C			MOVLW	12
$0BAD	$00F4			MOVWF	STACK_4
$0BAE	$3000			MOVLW	0
$0BAF	$00F5			MOVWF	STACK_4+1
$0BB0	$2444			CALL	_mul_16x16_u
$0BB1	$0870			MOVF	STACK_0, 0
$0BB2	$3FEC			ADDLW	#_menu
$0BB3	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$0BB4	$300B			MOVLW	@#_menu
$0BB5	$1803			BTFSC	STATUS, C
$0BB6	$3F01			ADDLW	1
$0BB7	$0771			ADDWF	STACK_0+1, 0
$0BB8	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$0BB9	$241D			CALL	_codetxt_to_ramtxt
$0BBA	$0870			MOVF	STACK_0, 0
$0BBB	$00E9			MOVWF	FARG_LCD_Out_CP+0
$0BBC	$24EA			CALL	_LCD_Out_CP
;multimeter.c,174 :: 		}
$0BBD	$0008			RETURN
$0C6F	$	_init:
;multimeter.c,27 :: 		void init(){
;multimeter.c,28 :: 		TRISD=0;
$0C6F	$1303			BCF	STATUS, RP1
$0C70	$1683			BSF	STATUS, RP0
$0C71	$0188			CLRF	TRISD, 1
;multimeter.c,29 :: 		Lcd_Init(&PORTD);
$0C72	$3008			MOVLW	PORTD
$0C73	$1283			BCF	STATUS, RP0
$0C74	$00DD			MOVWF	FARG_Lcd_Init+0
$0C75	$2140			CALL	_Lcd_Init
;multimeter.c,30 :: 		Lcd_Cmd(LCD_CLEAR);
$0C76	$3001			MOVLW	1
$0C77	$1683			BSF	STATUS, RP0
$0C78	$00C6			MOVWF	FARG_Lcd_Cmd+0
$0C79	$22B1			CALL	_Lcd_Cmd
;multimeter.c,31 :: 		Lcd_Cmd(LCD_CURSOR_OFF);
$0C7A	$300C			MOVLW	12
$0C7B	$1683			BSF	STATUS, RP0
$0C7C	$00C6			MOVWF	FARG_Lcd_Cmd+0
$0C7D	$22B1			CALL	_Lcd_Cmd
;multimeter.c,32 :: 		ADC_Init();
$0C7E	$2584			CALL	_ADC_Init
;multimeter.c,33 :: 		TRISB=0;
$0C7F	$0186			CLRF	TRISB, 1
;multimeter.c,34 :: 		PORTB=0;
$0C80	$1283			BCF	STATUS, RP0
$0C81	$0186			CLRF	PORTB, 1
;multimeter.c,35 :: 		PORTB.F1=1;
$0C82	$1486			BSF	PORTB, 1
;multimeter.c,36 :: 		TRISC=0xff;
$0C83	$30FF			MOVLW	255
$0C84	$1683			BSF	STATUS, RP0
$0C85	$0087			MOVWF	TRISC
;multimeter.c,37 :: 		}
$0C86	$0008			RETURN
$068F	$	_display_menu:
;multimeter.c,191 :: 		void display_menu(){
;multimeter.c,192 :: 		Lcd_out_cp(codetxt_to_ramtxt(menu[index]));
$068F	$1303			BCF	STATUS, RP1
$0690	$1283			BCF	STATUS, RP0
$0691	$0831			MOVF	_index, 0
$0692	$00F0			MOVWF	STACK_0
$0693	$01F1			CLRF	STACK_0+1
$0694	$300C			MOVLW	12
$0695	$00F4			MOVWF	STACK_4
$0696	$3000			MOVLW	0
$0697	$00F5			MOVWF	STACK_4+1
$0698	$158A			BSF	PCLATH, 3
$0699	$2444			CALL	_mul_16x16_u
$069A	$118A			BCF	PCLATH, 3
$069B	$0870			MOVF	STACK_0, 0
$069C	$3FEC			ADDLW	#_menu
$069D	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$069E	$300B			MOVLW	@#_menu
$069F	$1803			BTFSC	STATUS, C
$06A0	$3F01			ADDLW	1
$06A1	$0771			ADDWF	STACK_0+1, 0
$06A2	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$06A3	$158A			BSF	PCLATH, 3
$06A4	$241D			CALL	_codetxt_to_ramtxt
$06A5	$118A			BCF	PCLATH, 3
$06A6	$0870			MOVF	STACK_0, 0
$06A7	$00E9			MOVWF	FARG_LCD_Out_CP+0
$06A8	$158A			BSF	PCLATH, 3
$06A9	$24EA			CALL	_LCD_Out_CP
$06AA	$118A			BCF	PCLATH, 3
;multimeter.c,193 :: 		while (1){
$06AB	$	L_display_menu_36:
;multimeter.c,194 :: 		if (PORTC.F0==1){up();}
$06AB	$3001			MOVLW	1
$06AC	$0507			ANDWF	PORTC, 0
$06AD	$00F2			MOVWF	STACK_2
$06AE	$0872			MOVF	STACK_2, 0
$06AF	$3A01			XORLW	1
$06B0	$1D03			BTFSS	STATUS, Z
$06B1	$2EB6			GOTO	L_display_menu_38
$06B2	$158A			BSF	PCLATH, 3
$06B3	$2374			CALL	_up
$06B4	$118A			BCF	PCLATH, 3
$06B5	$2EF4			GOTO	L_display_menu_39
$06B6	$	L_display_menu_38:
;multimeter.c,195 :: 		else if (PORTC.F1==1){ok();Lcd_Cmd(LCD_CLEAR);Lcd_Cmd(LCD_FIRST_ROW);Lcd_out_cp(codetxt_to_ramtxt(menu[index]));}
$06B6	$3000			MOVLW	0
$06B7	$1887			BTFSC	PORTC, 1
$06B8	$3001			MOVLW	1
$06B9	$00F2			MOVWF	STACK_2
$06BA	$0872			MOVF	STACK_2, 0
$06BB	$3A01			XORLW	1
$06BC	$1D03			BTFSS	STATUS, Z
$06BD	$2EE9			GOTO	L_display_menu_40
$06BE	$158A			BSF	PCLATH, 3
$06BF	$21EF			CALL	_ok
$06C0	$118A			BCF	PCLATH, 3
$06C1	$3001			MOVLW	1
$06C2	$1303			BCF	STATUS, RP1
$06C3	$1683			BSF	STATUS, RP0
$06C4	$00C6			MOVWF	FARG_Lcd_Cmd+0
$06C5	$158A			BSF	PCLATH, 3
$06C6	$22B1			CALL	_Lcd_Cmd
$06C7	$118A			BCF	PCLATH, 3
$06C8	$3080			MOVLW	128
$06C9	$1683			BSF	STATUS, RP0
$06CA	$00C6			MOVWF	FARG_Lcd_Cmd+0
$06CB	$158A			BSF	PCLATH, 3
$06CC	$22B1			CALL	_Lcd_Cmd
$06CD	$118A			BCF	PCLATH, 3
$06CE	$0831			MOVF	_index, 0
$06CF	$00F0			MOVWF	STACK_0
$06D0	$01F1			CLRF	STACK_0+1
$06D1	$300C			MOVLW	12
$06D2	$00F4			MOVWF	STACK_4
$06D3	$3000			MOVLW	0
$06D4	$00F5			MOVWF	STACK_4+1
$06D5	$158A			BSF	PCLATH, 3
$06D6	$2444			CALL	_mul_16x16_u
$06D7	$118A			BCF	PCLATH, 3
$06D8	$0870			MOVF	STACK_0, 0
$06D9	$3FEC			ADDLW	#_menu
$06DA	$00E9			MOVWF	FARG_codetxt_to_ramtxt+0
$06DB	$300B			MOVLW	@#_menu
$06DC	$1803			BTFSC	STATUS, C
$06DD	$3F01			ADDLW	1
$06DE	$0771			ADDWF	STACK_0+1, 0
$06DF	$00EA			MOVWF	FARG_codetxt_to_ramtxt+1
$06E0	$158A			BSF	PCLATH, 3
$06E1	$241D			CALL	_codetxt_to_ramtxt
$06E2	$118A			BCF	PCLATH, 3
$06E3	$0870			MOVF	STACK_0, 0
$06E4	$00E9			MOVWF	FARG_LCD_Out_CP+0
$06E5	$158A			BSF	PCLATH, 3
$06E6	$24EA			CALL	_LCD_Out_CP
$06E7	$118A			BCF	PCLATH, 3
$06E8	$2EF4			GOTO	L_display_menu_41
$06E9	$	L_display_menu_40:
;multimeter.c,196 :: 		else if (PORTC.F2==1){down();}
$06E9	$3000			MOVLW	0
$06EA	$1907			BTFSC	PORTC, 2
$06EB	$3001			MOVLW	1
$06EC	$00F2			MOVWF	STACK_2
$06ED	$0872			MOVF	STACK_2, 0
$06EE	$3A01			XORLW	1
$06EF	$1D03			BTFSS	STATUS, Z
$06F0	$2EF4			GOTO	L_display_menu_42
$06F1	$158A			BSF	PCLATH, 3
$06F2	$2399			CALL	_down
$06F3	$118A			BCF	PCLATH, 3
$06F4	$	L_display_menu_42:
$06F4	$	L_display_menu_41:
$06F4	$	L_display_menu_39:
;multimeter.c,197 :: 		delay_ms(150);
$06F4	$30C3			MOVLW	195
$06F5	$00FB			MOVWF	STACK_11
$06F6	$30FF			MOVLW	255
$06F7	$00FA			MOVWF	STACK_10
$06F8	$0BFB			DECFSZ	STACK_11, F
$06F9	$2EFB			GOTO	$+2
$06FA	$2EFE			GOTO	$+4
$06FB	$0BFA			DECFSZ	STACK_10, F
$06FC	$2EFB			GOTO	$-1
$06FD	$2EF8			GOTO	$-5
$06FE	$304B			MOVLW	75
$06FF	$00FA			MOVWF	STACK_10
$0700	$0BFA			DECFSZ	STACK_10, F
$0701	$2F00			GOTO	$-1
$0702	$0000			NOP
;multimeter.c,198 :: 		}
$0703	$2EAB			GOTO	L_display_menu_36
;multimeter.c,199 :: 		}
$0704	$0008			RETURN
$0D46	$	GlobalInimultimeter:
$0D46	$3000			MOVLW	0
$0D47	$1303			BCF	STATUS, RP1
$0D48	$1283			BCF	STATUS, RP0
$0D49	$00A1			MOVWF	_counter+0
$0D4A	$3000			MOVLW	0
$0D4B	$00A2			MOVWF	_counter+1
$0D4C	$3000			MOVLW	0
$0D4D	$00A3			MOVWF	_counter+2
$0D4E	$3000			MOVLW	0
$0D4F	$00A4			MOVWF	_counter+3
$0D50	$3000			MOVLW	0
$0D51	$00A5			MOVWF	_err_c+0
$0D52	$3000			MOVLW	0
$0D53	$00B1			MOVWF	_index+0
;multimeter.c,211 :: 		}
$0D54	$0008			RETURN
$0D30	$	_main:
;multimeter.c,201 :: 		void main() {
;multimeter.c,202 :: 		init();
$0D30	$2546			CALL	GlobalInimultimeter
$0D31	$246F			CALL	_init
;multimeter.c,203 :: 		display_menu();
$0D32	$118A			BCF	PCLATH, 3
$0D33	$268F			CALL	_display_menu
$0D34	$158A			BSF	PCLATH, 3
;multimeter.c,204 :: 		}
$0D35	$2D35			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		interrupt
$0038		FloatToStr
$023C		cap_meter
$03E5		res_meter
$04D7		volt_meter
$05C2		amp_meter
$068F		display_menu
$0705		SETFOV32
$0800		Add_32x32_FP
$08A2		Div_32x32_FP
$0940		Lcd_Init
$098C		Mul_32x32_FP
$09EF		ok
$0A53		NRM4032
$0AB1		Lcd_Cmd
$0AF3		Compare_Double
$0B43		NRM3232
$0B74		up
$0B99		down
$0BBE		Adc_Read
$0BEC		?table___menu
$0C1D		codetxt_to_ramtxt
$0C44		Mul_16x16_U
$0C6F		init
$0C87		get_volt_value
$0CA2		strcpy
$0CC0		Word2Double
$0CD6		Longword2Double
$0CEA		LCD_Out_CP
$0CFE		Byte2Double
$0D0E		Delay_5500us
$0D1F		Div_8x8_U
$0D30		main
$0D36		?table___err
$0D46		GlobalInimultimeter
$0D55		Lcd_Chr_CP
$0D5F		SETFUN32
$0D6D		Sub_32x32_FP
$0D73		RES032
$0D7C		Delay_50us
$0D84		ADC_Init
$0D8B		?table___msg1
$0D92		____DoICP
$0D99		Delay_22us
$0DA0		FIXSIGN32
$0DA6		SETFDZ32
$0DAB		Delay_1us


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_interrupt:
$0026		L_interrupt_46:
$002A		L_interrupt_43:
$002B		L_Interrupt_end:
$0038		_FloatToStr:
$006B		L_FloatToStr_60:
$0078		L_FloatToStr_29:
$0086		L_FloatToStr_30:
$0096		L_FloatToStr_61:
$00A2		L_FloatToStr_31:
$00B1		L_FloatToStr_62:
$00BF		L_FloatToStr_32:
$00BF		L_FloatToStr_33:
$00F8		L_FloatToStr_34:
$00F8		L_FloatToStr_35:
$0133		L_FloatToStr_36:
$0166		L_FloatToStr_63:
$016F		L_FloatToStr_64:
$0189		L374_ex_L_FloatToStr_39:
$0192		L_FloatToStr_39:
$0194		L_FloatToStr_40:
$01DA		L_FloatToStr_42:
$01DA		L_FloatToStr_43:
$01DA		L_FloatToStr_44:
$01DC		L_FloatToStr_41:
$01DC		L_FloatToStr_45:
$01E8		L_FloatToStr_46:
$01F2		L_FloatToStr_47:
$0210		L_FloatToStr_49:
$0224		L_FloatToStr_50:
$0235		L_FloatToStr_48:
$023C		_cap_meter:
$0290		L_cap_meter_18:
$02BB		L_cap_meter_21:
$02DF		L_cap_meter_22:
$03A0		L_cap_meter_24:
$03B7		L_cap_meter_25:
$03B8		L_cap_meter_23:
$03C5		L_cap_meter_20:
$03C5		L_cap_meter_26:
$03E4		L_cap_meter_19:
$03E5		_res_meter:
$03EC		L_res_meter_16:
$04D6		L_res_meter_17:
$04D7		_volt_meter:
$04E7		L_volt_meter_3:
$04F9		L_volt_meter_5:
$04FA		L_volt_meter_8:
$04FE		L_volt_meter_9:
$0502		L_volt_meter_6:
$050A		L_volt_meter_7:
$054E		L_volt_meter_44:
$0596		L_volt_meter_10:
$05A2		L_volt_meter_11:
$05C1		L_volt_meter_4:
$05C2		_amp_meter:
$05C9		L_amp_meter_12:
$0616		L_amp_meter_45:
$0663		L_amp_meter_14:
$066F		L_amp_meter_15:
$068E		L_amp_meter_13:
$068F		_display_menu:
$06AB		L_display_menu_36:
$06B6		L_display_menu_38:
$06E9		L_display_menu_40:
$06F4		L_display_menu_39:
$06F4		L_display_menu_41:
$06F4		L_display_menu_42:
$0705		_SETFOV32:
$0711		SETFOV32EEE:
$0800		_Add_32x32_FP:
$0823		USEA32:
$084C		ALIGNB32:
$084F		ALOOPB32:
$0856		ALIGNED32:
$0863		AOK32:
$087C		ACOMP32:
$088C		JMPNRMRND4032:
$0890		JMPNRM4032:
$0894		JMPNRM32:
$0898		ADD_JMPSETFOV32:
$089E		JMPEEE:
$08A0		ADD32EEE:
$08A2		_Div_32x32_FP:
$08A4		FPD32:
$08AA		D32BNE0:
$08B0		TALIGN32:
$08BC		TS1ALIGN32:
$08C0		TS2ALIGN32:
$08CD		DALIGN32OK:
$08D1		AGEB32:
$08D7		ALTB32:
$08DC		DARGOK32:
$08DE		DLOOP32:
$08EA		DS132:
$08EE		DS232:
$08F5		DREST32:
$08FA		DAREST32:
$0900		DOK32:
$0905		DROUND32:
$0927		DIV32OK:
$0931		JPDSETFDZ32:
$0934		JPDRES032:
$0937		JPDSETFOV32:
$093C		JPDSETFUN32:
$093E		DIV32EEE:
$0940		_Lcd_Init:
$098C		_Mul_32x32_FP:
$098E		FPM32:
$0994		M32BNE0:
$09A0		MTUN32:
$09A3		MOK32:
$09B1		MLOOP32:
$09B3		MADD32:
$09BD		MNOADD32:
$09CD		MROUND32:
$09DF		MUL32OK:
$09E3		JPMRES032:
$09E6		JPMSETFOV32:
$09EB		JPMSETFUN32:
$09ED		MUL32EEE:
$09EF		_ok:
$09F0		L_ok_31:
$0A05		L_ok_32:
$0A18		L_ok_33:
$0A2B		L_ok_34:
$0A3E		L_ok_35:
$0A3F		L_ok_29:
$0A52		L_ok_30:
$0A53		_NRM4032:
$0A5C		NRM4032:
$0A7C		NORM4032:
$0A82		NORM4032A:
$0A8B		NRMRND4032:
$0A9E		JMPRES032:
$0AA2		JMPSETFUN32:
$0AA6		JMPFIXSIGN32:
$0AAA		JMPSETFOV32:
$0AAF		NRM4032EEE:
$0AB1		_Lcd_Cmd:
$0AB9		L_Lcd_Cmd_0:
$0ACD		L_Lcd_Cmd_1:
$0ACE		L_Lcd_Cmd_2:
$0AD4		L_Lcd_Cmd_3:
$0AE8		L_Lcd_Cmd_4:
$0AE9		L_Lcd_Cmd_5:
$0AF1		L_Lcd_Cmd_6:
$0AF2		L_Lcd_Cmd_7:
$0AF3		_Compare_Double:
$0B04		COMPARE_YNOTZERO:
$0B07		COMPARE_XNOTZERO:
$0B0A		COMPARE_NOTZERO:
$0B18		COMPARE_TESTALL:
$0B1F		COMPARE_C1:
$0B26		COMPARE_C2:
$0B2D		COMPARE_C3:
$0B33		GT_FALSE:
$0B37		GT_TRUE:
$0B3B		COMPARE_GT:
$0B3D		COMPARE_LT:
$0B3F		COMPARE_EQU:
$0B43		_NRM3232:
$0B5A		NORM3232:
$0B60		NORM3232A:
$0B68		JPNRES032:
$0B6C		JPNSETFUN32:
$0B70		JMPNFIXSIGN32:
$0B73		NORM32EEE:
$0B74		_up:
$0B7B		L_up_27:
$0B99		_down:
$0BA0		L_down_28:
$0BBE		_Adc_Read:
$0BD4		L_Adc_Read_0:
$0BD8		L_Adc_Read_1:
$0BDF		L_Adc_Read_2:
$0BE6		L_Adc_Read_3:
$0BEC		table___menu:
$0C1D		_codetxt_to_ramtxt:
$0C20		L_codetxt_to_ramtxt_0:
$0C3F		L_codetxt_to_ramtxt_2:
$0C41		L_codetxt_to_ramtxt_1:
$0C44		_Mul_16x16_U:
$0C6F		_init:
$0C87		_get_volt_value:
$0CA2		_strcpy:
$0CA7		L_strcpy_31:
$0CBD		L_strcpy_32:
$0CC0		_Word2Double:
$0CC9		FLO16U32:
$0CD6		_Longword2Double:
$0CE1		FLO32U32:
$0CEA		_LCD_Out_CP:
$0CED		L_LCD_Out_CP_15:
$0CFD		L_LCD_Out_CP_16:
$0CFE		_Byte2Double:
$0D00		FLO08U32:
$0D0E		_Delay_5500us:
$0D1F		_Div_8x8_U:
$0D30		_main:
$0D36		table___err:
$0D46		GlobalInimultimeter:
$0D55		_Lcd_Chr_CP:
$0D5F		_SETFUN32:
$0D6B		SETFUN32EEE:
$0D6D		_Sub_32x32_FP:
$0D73		_RES032:
$0D7C		_Delay_50us:
$0D84		_ADC_Init:
$0D8B		table___msg1:
$0D92		_____DoICP:
$0D99		_Delay_22us:
$0DA0		_FIXSIGN32:
$0DA6		_SETFDZ32:
$0DAB		_Delay_1us:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0001		TMR0
$0002		PCL
$0003		STATUS
$0004		FSR
$0006		PORTB
$0007		PORTC
$0008		PORTD
$000A		PCLATH
$000B		INTCON
$001E		ADRESH
$001F		ADCON0
$0020		___math_tempbD
$0021		_counter
$0025		_err_c
$0026		LCD_port_address
$0027		LCD_cmd_status
$0028		___DoICPSavePCLATH
$0029		___DoICPHiAddr
$002A		___DoICPLoAddr
$002B		_adc_value_pos
$002D		_adc_value_neg
$002F		_adc_value
$0031		_index
$0032		_str
$0041		_timer0
$0042		_cap_value
$0046		codetxt_to_ramtxt_txt_L0
$005A		?saveFSR
$005B		?saveSTATUS
$005C		?savePCLATH
$005D		FARG_Lcd_Init+0
$005E		lstr1_multimeter
$005E		lstr3_multimeter
$005E		lstr4_multimeter
$0061		
$0061		lstr2_multimeter
$0064		volt_meter_range_L0
$0065		volt_meter_mult_L0
$0069		FARG_codetxt_to_ramtxt+0
$0069		FARG_FloatToStr+0
$0069		FARG_get_volt_value+0
$0069		FARG_LCD_Out_CP+0
$006A		FARG_get_volt_value+1
$006A		LCD_Out_CP_i_L0
$006B		codetxt_to_ramtxt_i_L0
$006D		FARG_FloatToStr+4
$006E		FARG_Adc_Read+0
$006E		FARG_Lcd_Chr_CP+0
$006E		FARG_strcpy+0
$006F		FARG_strcpy+1
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0081		OPTION_REG
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0088		TRISD
$009E		ADRESL
$009F		ADCON1
$00A0		lstr5_multimeter
$00A9		lstr6_multimeter
$00AC		lstr7_multimeter
$00AF		
$00B3		lstr1_conv
$00B7		lstr2_conv
$00B9		lstr3_conv
$00BD		FloatToStr_bpoint_L0
$00BE		FloatToStr_i_L0
$00BF		FloatToStr_d_L0
$00C0		FloatToStr_dexpon_L0
$00C1		FloatToStr_un_L0
$00C5		strcpy_cp_L0
$00C6		FARG_Lcd_Cmd+0


